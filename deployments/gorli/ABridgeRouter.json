{
  "address": "0x9b83dFeCC73A9bEDeb976fB36600b7B2a6c88F17",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "originAndNonce",
          "type": "uint64"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Receive",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "toDomain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "toId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Send",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_domain",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_router",
          "type": "bytes32"
        }
      ],
      "name": "enrollRemoteRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_nonce",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "remotes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_recipient",
          "type": "bytes32"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_destination",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_remoteHook",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "sendToHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xAppConnectionManager",
          "type": "address"
        }
      ],
      "name": "setXAppConnectionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRegistry",
      "outputs": [
        {
          "internalType": "contract TokenRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xAppConnectionManager",
      "outputs": [
        {
          "internalType": "contract XAppConnectionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x29ec778900705172cb89d8412dba55d831d50c1b719c6849f06e399442ebc76c",
  "receipt": {
    "to": null,
    "from": "0x218F56910B3d1265c72c8b53A207f045fe7f5042",
    "contractAddress": "0x9b83dFeCC73A9bEDeb976fB36600b7B2a6c88F17",
    "transactionIndex": 27,
    "gasUsed": "4217239",
    "logsBloom": "0x
    "blockHash": "0x6e9205a6a230698d229dc77e4ceb0abb1722f2a4d0316959c8fe7fc5963922fd",
    "transactionHash": "0x29ec778900705172cb89d8412dba55d831d50c1b719c6849f06e399442ebc76c",
    "logs": [],
    "blockNumber": 7612604,
    "cumulativeGasUsed": "15883442",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d216661bc5af561d28ec5fd946b59ebb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"originAndNonce\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Receive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"toDomain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"toId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Send\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_router\",\"type\":\"bytes32\"}],\"name\":\"enrollRemoteRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"remotes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_recipient\",\"type\":\"bytes32\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_remoteHook\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"sendToHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xAppConnectionManager\",\"type\":\"address\"}],\"name\":\"setXAppConnectionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRegistry\",\"outputs\":[{\"internalType\":\"contract TokenRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xAppConnectionManager\",\"outputs\":[{\"internalType\":\"contract XAppConnectionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"Receive(uint64,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens being received\",\"originAndNonce\":\"Domain where the transfer originated and the unique identifier for the message from origin to destination, combined in a single field ((origin << 32) & nonce)\",\"recipient\":\"The address receiving the tokens; the original recipient of the transfer\",\"token\":\"The address of the local token contract being received\"}},\"Send(address,address,uint32,bytes32,uint256)\":{\"params\":{\"amount\":\"the amount of tokens sent\",\"from\":\"the address sending tokens\",\"toDomain\":\"the domain of the chain the tokens are being sent to\",\"toId\":\"the bytes32 address of the recipient of the tokens\",\"token\":\"the address of the token contract\"}}},\"kind\":\"dev\",\"methods\":{\"enrollRemoteRouter(uint32,bytes32)\":{\"params\":{\"_domain\":\"The domain of the remote xApp Router\",\"_router\":\"The address of the remote xApp Router\"}},\"handle(uint32,uint32,bytes32,bytes)\":{\"params\":{\"_message\":\"The message\",\"_nonce\":\"The unique identifier for the message from origin to destination\",\"_origin\":\"The origin domain\",\"_sender\":\"The sender address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"should be impossible to renounce ownership;      we override OpenZeppelin OwnableUpgradeable's      implementation of renounceOwnership to make it a no-op\"},\"send(address,uint256,uint32,bytes32)\":{\"params\":{\"_amount\":\"The token amount\",\"_destination\":\"The destination domain\",\"_recipient\":\"The recipient address\",\"_token\":\"The token address\"}},\"sendToHook(address,uint256,uint32,bytes32,bytes)\":{\"params\":{\"_amount\":\"The token amount\",\"_destination\":\"The destination domain\",\"_extraData\":\"Extra data that will be passed to the hook for        execution\",\"_remoteHook\":\"The hook contract on the remote chain\",\"_token\":\"The token address\"}},\"setXAppConnectionManager(address)\":{\"params\":{\"_xAppConnectionManager\":\"The address of the xAppConnectionManager contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Receive(uint64,address,address,uint256)\":{\"notice\":\"emitted when tokens are dispensed to an account on this domain emitted when the transfer ultimately settles\"},\"Send(address,address,uint32,bytes32,uint256)\":{\"notice\":\"emitted when tokens are sent from this domain to another domain\"}},\"kind\":\"user\",\"methods\":{\"enrollRemoteRouter(uint32,bytes32)\":{\"notice\":\"Register the address of a Router contract for the same xApp on a remote chain\"},\"handle(uint32,uint32,bytes32,bytes)\":{\"notice\":\"Handles an incoming message\"},\"send(address,uint256,uint32,bytes32)\":{\"notice\":\"Send tokens to a recipient on a remote chain\"},\"sendToHook(address,uint256,uint32,bytes32,bytes)\":{\"notice\":\"Send tokens to a hook on the remote chain\"},\"setXAppConnectionManager(address)\":{\"notice\":\"Modify the contract the xApp uses to validate Replica contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ABridgeRouter.sol\":\"ABridgeRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xdb7f5c28fc61cda0bd8ab60ce288e206b791643bcd3ba464a70cbec18895a2f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ABridgeRouter.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {BridgeMessage} from \\\"./BridgeMessage.sol\\\";\\nimport {ABridgeToken} from \\\"./ABridgeToken.sol\\\";\\nimport {TokenRegistry} from \\\"./TokenRegistry.sol\\\";\\n\\n// ============ External Imports ============\\nimport {XAppConnectionClient} from \\\"./nomad/router/XAppConnectionClient.sol\\\";\\nimport {Router} from \\\"./nomad/router/Router.sol\\\";\\nimport {Home} from \\\"./nomad/core/Home.sol\\\";\\nimport {TypeCasts} from \\\"./nomad/core/libs/TypeCasts.sol\\\";\\nimport {TypedMemView} from \\\"./summa/TypedMemView.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract ABridgeRouter is Router {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using BridgeMessage for bytes29;\\n    using SafeERC20 for IERC20;\\n\\n    // ============ Public Storage ============\\n\\n    // contract that manages registry representation tokens\\n    TokenRegistry public tokenRegistry;\\n\\n    // mapping tracking the amount of shares for a canonical aToken locked up to a destination.\\n    // Used to calculate the current supply for representation tokens\\n    mapping(bytes32 => uint256) private canonicalSharesAtDestination;\\n\\n    // ======== Events =========\\n\\n    /**\\n     * @notice emitted when tokens are sent from this domain to another domain\\n     * @param token the address of the token contract\\n     * @param from the address sending tokens\\n     * @param toDomain the domain of the chain the tokens are being sent to\\n     * @param toId the bytes32 address of the recipient of the tokens\\n     * @param amount the amount of tokens sent\\n     */\\n    event Send(\\n        address indexed token,\\n        address indexed from,\\n        uint32 indexed toDomain,\\n        bytes32 toId,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @notice emitted when tokens are dispensed to an account on this domain\\n     * emitted when the transfer ultimately settles\\n     * @param originAndNonce Domain where the transfer originated and the unique identifier\\n     * for the message from origin to destination, combined in a single field ((origin << 32) & nonce)\\n     * @param token The address of the local token contract being received\\n     * @param recipient The address receiving the tokens; the original recipient of the transfer\\n     * @param amount The amount of tokens being received\\n     */\\n    event Receive(\\n        uint64 indexed originAndNonce,\\n        address indexed token,\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    // ======== Receive =======\\n    receive() external payable {}\\n\\n    // ======== Initializer ========\\n\\n    function initialize(address _tokenRegistry, address _xAppConnectionManager)\\n        public\\n        initializer\\n    {\\n        tokenRegistry = TokenRegistry(_tokenRegistry);\\n        __XAppConnectionClient_initialize(_xAppConnectionManager);\\n    }\\n\\n    // ======== External =========\\n\\n    // ===== Handle ======\\n\\n    /**\\n     * @notice Handles an incoming message\\n     * @param _origin The origin domain\\n     * @param _nonce The unique identifier for the message from origin to destination\\n     * @param _sender The sender address\\n     * @param _message The message\\n     */\\n    function handle(\\n        uint32 _origin,\\n        uint32 _nonce,\\n        bytes32 _sender,\\n        bytes memory _message\\n    ) external override onlyReplica onlyRemoteRouter(_origin, _sender) {\\n        // parse tokenId and action from message\\n        bytes29 _msg = _message.ref(0).mustBeMessage();\\n        bytes29 _tokenId = _msg.tokenId();\\n        bytes29 _action = _msg.action();\\n        // handle message based on the intended action\\n        if (_action.isTransfer()) {\\n            _handleTransfer(_origin, _nonce, _tokenId, _action);\\n        } else if (_action.isUpdateSupply()) {\\n            _handleUpdateSupply(_tokenId, _action);\\n        } else {\\n            require(false, \\\"!valid action\\\");\\n        }\\n    }\\n\\n    // ===== Send ======\\n\\n    /**\\n     * @notice Send tokens to a recipient on a remote chain\\n     * @param _token The token address\\n     * @param _amount The token amount\\n     * @param _destination The destination domain\\n     * @param _recipient The recipient address\\n     */\\n    function send(\\n        address _token,\\n        uint256 _amount,\\n        uint32 _destination,\\n        bytes32 _recipient\\n    ) external {\\n        // validate inputs\\n        require(_recipient != bytes32(0), \\\"!recip\\\");\\n        // debit tokens from the sender\\n        (bytes29 _tokenId, bytes32 _detailsHash) = _takeTokens(_token, _amount);\\n        // format Transfer message\\n        bytes29 _action = BridgeMessage.formatTransfer(\\n            _recipient,\\n            _amount,\\n            _detailsHash\\n        );\\n        // send message to destination chain bridge router\\n        _sendTransferMessage(_destination, _tokenId, _action);\\n        // emit Send event to record token sender\\n        emit Send(_token, msg.sender, _destination, _recipient, _amount);\\n    }\\n\\n    // ===== SendToHook ======\\n\\n    /**\\n     * @notice Send tokens to a hook on the remote chain\\n     * @param _token The token address\\n     * @param _amount The token amount\\n     * @param _destination The destination domain\\n     * @param _remoteHook The hook contract on the remote chain\\n     * @param _extraData Extra data that will be passed to the hook for\\n     *        execution\\n     */\\n    function sendToHook(\\n        address _token,\\n        uint256 _amount,\\n        uint32 _destination,\\n        bytes32 _remoteHook,\\n        bytes calldata _extraData\\n    ) external {\\n        // debit tokens from msg.sender\\n        (bytes29 _tokenId, bytes32 _detailsHash) = _takeTokens(_token, _amount);\\n        // format Hook transfer message\\n        bytes29 _action = BridgeMessage.formatTransferToHook(\\n            _remoteHook,\\n            _amount,\\n            _detailsHash,\\n            TypeCasts.addressToBytes32(msg.sender),\\n            _extraData\\n        );\\n        // send message to destination chain bridge router\\n        _sendTransferMessage(_destination, _tokenId, _action);\\n        // emit Send event to record token sender\\n        emit Send(_token, msg.sender, _destination, _remoteHook, _amount);\\n    }\\n\\n    // ======== Internal Handlers =========\\n\\n    // ===== handleTransfer ======\\n    function _handleTransfer(\\n        uint32 _origin,\\n        uint32 _nonce,\\n        bytes29 _tokenId,\\n        bytes29 _action\\n    ) internal {\\n        // tokens will be sent to the specified recipient\\n        address _recipient = _action.evmRecipient();\\n        // send tokens\\n        _giveTokens(_origin, _nonce, _tokenId, _action, _recipient);\\n    }\\n\\n    // ===== handleUpdateSupply ======\\n\\n    function _handleUpdateSupply(bytes29 _tokenId, bytes29 _action) internal {\\n        address _token = tokenRegistry.ensureLocalToken(\\n            _tokenId.domain(),\\n            _tokenId.id()\\n        );\\n\\n        require(!tokenRegistry.isLocalOrigin(_token), \\\"LOCAL_ORIGIN\\\");\\n        ABridgeToken(_token).updateSupply(_action.supply());\\n    }\\n\\n    // ======== Internal Helpers =========\\n\\n    function _giveTokens(\\n        uint32 _origin,\\n        uint32 _nonce,\\n        bytes29 _tokenId,\\n        bytes29 _action,\\n        address _recipient\\n    ) internal returns (address _token) {\\n        // get the token contract for the given tokenId on this chain;\\n        // (if the token is of remote origin and there is\\n        // no existing representation token contract, the TokenRegistry will\\n        // deploy a new one)\\n        _token = tokenRegistry.ensureLocalToken(\\n            _tokenId.domain(),\\n            _tokenId.id()\\n        );\\n        // load amount once\\n        uint256 _amount = _action.amnt();\\n        // send the tokens into circulation on this chain\\n        if (tokenRegistry.isLocalOrigin(_token)) {\\n            // if the token is of local origin, the tokens have been held in\\n            // escrow in this contract\\n            // while they have been circulating on remote chains;\\n            // transfer the tokens to the recipient\\n            IERC20(_token).safeTransfer(_recipient, _amount);\\n        } else {\\n            // if the token is of remote origin, mint the tokens to the\\n            // recipient on this chain\\n            ABridgeToken(_token).mint(_recipient, _amount);\\n            // Tell the token what its detailsHash is\\n            ABridgeToken(_token).setDetailsHash(_action.detailsHash());\\n        }\\n        // emit Receive event\\n        emit Receive(\\n            _originAndNonce(_origin, _nonce),\\n            _token,\\n            _recipient,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @notice Take from msg.sender as part of sending tokens across chains\\n     * @dev Locks canonical tokens in escrow in BridgeRouter\\n     *      OR Burns representation tokens\\n     * @param _token The token to pull from the sender\\n     * @param _amount The amount to pull from the sender\\n     * @return _tokenId the bytes canonical token identifier\\n     * @return _detailsHash the hash of the canonical token details (name,\\n     *         symbol, decimal)\\n     */\\n    function _takeTokens(address _token, uint256 _amount)\\n        internal\\n        returns (bytes29 _tokenId, bytes32 _detailsHash)\\n    {\\n        // ensure that amount is non-zero\\n        require(_amount > 0, \\\"!amnt\\\");\\n        // Setup vars used in both if branches\\n        ABridgeToken _t = ABridgeToken(_token);\\n        // remove tokens from circulation on this chain\\n        if (tokenRegistry.isLocalOrigin(_token)) {\\n            // if the token originates on this chain,\\n            // hold the tokens in escrow in the Router\\n            IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n            // query token contract for details and calculate detailsHash\\n            _detailsHash = BridgeMessage.getDetailsHash(\\n                _t.name(),\\n                _t.symbol(),\\n                _t.decimals()\\n            );\\n        } else {\\n            // if the token originates on a remote chain,\\n            // burn the representation tokens on this chain\\n            _t.burn(msg.sender, _amount);\\n            _detailsHash = _t.detailsHash();\\n        }\\n        // get the tokenID\\n        (uint32 _domain, bytes32 _id) = tokenRegistry.getTokenId(_token);\\n        _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\n    }\\n\\n    /**\\n     * @notice Dispatch a message via Nomad to a destination domain\\n     *         addressed to the remote BridgeRouter on that chain\\n     * @dev Message will trigger `handle` method on the remote BridgeRouter\\n     *      when it is received on the destination chain\\n     * @param _destination The domain of the destination chain\\n     * @param _tokenId The canonical token identifier for the transfer message\\n     * @param _action The contents of the transfer message\\n     */\\n    function _sendTransferMessage(\\n        uint32 _destination,\\n        bytes29 _tokenId,\\n        bytes29 _action\\n    ) internal {\\n        // get remote BridgeRouter address; revert if not found\\n        bytes32 _remote = _mustHaveRemote(_destination);\\n        // send message to remote chain via Nomad\\n        Home(xAppConnectionManager.home()).dispatch(\\n            _destination,\\n            _remote,\\n            BridgeMessage.formatMessage(_tokenId, _action)\\n        );\\n    }\\n\\n    // ============ Internal: Utils ============\\n\\n    /**\\n     * @dev should be impossible to renounce ownership;\\n     *      we override OpenZeppelin OwnableUpgradeable's\\n     *      implementation of renounceOwnership to make it a no-op\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // do nothing\\n    }\\n\\n    function _originAndNonce(uint32 _origin, uint32 _nonce)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        return (uint64(_origin) << 32) | _nonce;\\n    }\\n}\\n\",\"keccak256\":\"0x22ba3f4baf8fc838ad64fa8ee2939804a0391d9260f45a913433eab76d08a62d\",\"license\":\"MIT\"},\"contracts/ABridgeToken.sol\":{\"content\":\"pragma solidity ^0.8.15;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./AERC20.sol\\\";\\nimport {BridgeMessage} from \\\"./BridgeMessage.sol\\\";\\n\\ncontract ABridgeToken is OwnableUpgradeable, AERC20 {\\n    // ============ Immutables ============\\n\\n    // Immutables used in EIP 712 structured data hashing & signing\\n    // https://eips.ethereum.org/EIPS/eip-712\\n    bytes32 public immutable _PERMIT_TYPEHASH =\\n        keccak256(\\n            \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n        );\\n    bytes32 private immutable _EIP712_STRUCTURED_DATA_VERSION =\\n        keccak256(bytes(\\\"1\\\"));\\n    uint16 private immutable _EIP712_PREFIX_AND_VERSION = uint16(0x1901);\\n\\n    // ============ Public Storage ============\\n\\n    mapping(address => uint256) public nonces;\\n    /// @dev hash commitment to the name/symbol/decimals\\n    bytes32 public detailsHash;\\n\\n    // ============ Initializer ============\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n    }\\n\\n    // ============ Events ============\\n\\n    event UpdateDetails(\\n        string indexed name,\\n        string indexed symbol,\\n        uint8 indexed decimals\\n    );\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return token.name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return token.symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return token.decimals;\\n    }\\n\\n    /**\\n     * @notice Destroys `_amnt` tokens from `_from`, reducing the\\n     * total supply.\\n     * @dev Emits a {Transfer} event with `to` set to the zero address.\\n     * Requirements:\\n     * - `_from` cannot be the zero address.\\n     * - `_from` must have at least `_amnt` tokens.\\n     * @param _from The address from which to destroy the tokens\\n     * @param _amnt The amount of tokens to be destroyed\\n     */\\n    function burn(address _from, uint256 _amnt) external onlyOwner {\\n        _burnShares(_from, _tokensToShares(_amnt));\\n    }\\n\\n    /** @notice Creates `_amnt` tokens and assigns them to `_to`, increasing\\n     * the total supply.\\n     * @dev Emits a {Transfer} event with `from` set to the zero address.\\n     * Requirements:\\n     * - `to` cannot be the zero address.\\n     * @param _to The destination address\\n     * @param _amnt The amount of tokens to be minted\\n     */\\n    function mint(address _to, uint256 _amnt) external onlyOwner {\\n        _mintShares(_to, _tokensToShares(_amnt));\\n    }\\n\\n    /** @notice allows the owner to set the details hash commitment.\\n     * @param _detailsHash the new details hash.\\n     */\\n    function setDetailsHash(bytes32 _detailsHash) external onlyOwner {\\n        if (detailsHash != _detailsHash) {\\n            detailsHash = _detailsHash;\\n        }\\n    }\\n\\n    /**\\n     * @notice Set the details of a token\\n     * @param _newName The new name\\n     * @param _newSymbol The new symbol\\n     * @param _newDecimals The new decimals\\n     */\\n    function setDetails(\\n        string calldata _newName,\\n        string calldata _newSymbol,\\n        uint8 _newDecimals\\n    ) external {\\n        bool _isFirstDetails = bytes(token.name).length == 0;\\n        // 0 case is the initial deploy. We allow the deploying registry to set\\n        // these once. After the first transfer is made, detailsHash will be\\n        // set, allowing anyone to supply correct name/symbols/decimals\\n        require(\\n            _isFirstDetails ||\\n                BridgeMessage.getDetailsHash(\\n                    _newName,\\n                    _newSymbol,\\n                    _newDecimals\\n                ) ==\\n                detailsHash,\\n            \\\"!committed details\\\"\\n        );\\n        // careful with naming convention change here\\n        token.name = _newName;\\n        token.symbol = _newSymbol;\\n        token.decimals = _newDecimals;\\n        if (!_isFirstDetails) {\\n            emit UpdateDetails(_newName, _newSymbol, _newDecimals);\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets approval from owner to spender to value\\n     * as long as deadline has not passed\\n     * by submitting a valid signature from owner\\n     * Uses EIP 712 structured data hashing & signing\\n     * https://eips.ethereum.org/EIPS/eip-712\\n     * @param _owner The account setting approval & signing the message\\n     * @param _spender The account receiving approval to spend owner's tokens\\n     * @param _value The amount to set approval for\\n     * @param _deadline The timestamp before which the signature must be submitted\\n     * @param _v ECDSA signature v\\n     * @param _r ECDSA signature r\\n     * @param _s ECDSA signature s\\n     */\\n    function permit(\\n        address _owner,\\n        address _spender,\\n        uint256 _value,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        require(block.timestamp <= _deadline, \\\"ERC20Permit: expired deadline\\\");\\n        require(_owner != address(0), \\\"ERC20Permit: owner zero address\\\");\\n        uint256 _nonce = nonces[_owner];\\n        bytes32 _hashStruct = keccak256(\\n            abi.encode(\\n                _PERMIT_TYPEHASH,\\n                _owner,\\n                _spender,\\n                _value,\\n                _nonce,\\n                _deadline\\n            )\\n        );\\n        bytes32 _digest = keccak256(\\n            abi.encodePacked(\\n                _EIP712_PREFIX_AND_VERSION,\\n                domainSeparator(),\\n                _hashStruct\\n            )\\n        );\\n        address _signer = ecrecover(_digest, _v, _r, _s);\\n        require(_signer == _owner, \\\"ERC20Permit: invalid signature\\\");\\n        nonces[_owner] = _nonce + 1;\\n        _approve(_owner, _spender, _value);\\n    }\\n\\n    /**\\n     * @dev This is ALWAYS calculated at runtime\\n     * because the token name may change\\n     */\\n    function domainSeparator() public view returns (bytes32) {\\n        uint256 _chainId;\\n        assembly {\\n            _chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(token.name)),\\n                    _EIP712_STRUCTURED_DATA_VERSION,\\n                    _chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    // required for solidity inheritance\\n    function transferOwnership(address _newOwner) public override onlyOwner {\\n        OwnableUpgradeable.transferOwnership(_newOwner);\\n    }\\n\\n    /**\\n     * @dev should be impossible to renounce ownership;\\n     * we override OpenZeppelin OwnableUpgradeable's\\n     * implementation of renounceOwnership to make it a no-op\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // do nothing\\n    }\\n\\n    function updateSupply(uint256 _newSupply) external {\\n        totalSupply = _newSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x12e1623906b8e589a54e3e449d89e42d6fffec2305ce210ab6b02ab4249e7dbf\"},\"contracts/AERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.15;\\n\\ncontract AERC20 {\\n    /**\\n     * @notice Transfer gets emitted when TenderTokens are transferred.\\n     * @param from the account that tokens are transferred from\\n     * @param to the account that tokens are transferred to\\n     * @param amount the amount of tokens transferred\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /**\\n     * @notice Approve gets emitted when TenderTokens are approved for spending.\\n     * @param owner the account tokens are approved from\\n     * @param spender the account tokens are approved to\\n     * @param amount the amount of tokens approved\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 amount\\n    );\\n\\n    struct Token {\\n        string symbol;\\n        string name;\\n        uint8 decimals;\\n    }\\n\\n    Token internal token;\\n\\n    /**\\n     * @dev Total supply of token\\n     * @dev Controlled by Tenderizer\\n     * @notice Total amount of tokens staked\\n     */\\n    uint256 public totalSupply;\\n\\n    /**\\n     * @dev Total amount of outstanding shares\\n     */\\n    uint256 public totalShares;\\n\\n    /**\\n     * @dev Shares of all accounts.\\n     * @dev tokens = shares * totalSupply / totalShares;\\n     */\\n    mapping(address => uint256) public shares;\\n\\n    /**\\n     * @dev Allowances nominated in tokens, not token shares.\\n     */\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /**\\n     * @param _account Account whose balance is requested.\\n     * @dev Returns the amount of tokens (amount represented by shares) owned by `_account`.\\n     */\\n    function balanceOf(address _account) external view returns (uint256) {\\n        return _sharesToTokens(shares[_account]);\\n    }\\n\\n    /**\\n     * @param _spender account to approve tokens for spending.\\n     * @param _amount token ammount to approve for spending.\\n     * @return success boolean value indicating whether the operation succeeded.\\n     * @dev Sets `_amount` as the allowance of `_spender` over the caller's tokens.\\n     * @dev Emits an `Approval` event.\\n     */\\n    function approve(address _spender, uint256 _amount) public returns (bool) {\\n        return _approve(msg.sender, _spender, _amount);\\n    }\\n\\n    /**\\n     * @param _spender account to increase token allowance for spending.\\n     * @param _addedValue token ammount to add to existing allowance.\\n     * @return success boolean value indicating whether the operation succeeded.\\n     * @dev Increases allowance by `_amount` for `spender` over the caller's tokens.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        returns (bool)\\n    {\\n        allowance[msg.sender][_spender] += _addedValue;\\n        return true;\\n    }\\n\\n    /**\\n     * @param _spender account to increase token allowance for spending.\\n     * @param _subtractedValue token ammount to subtract from existing allowance.\\n     * @return success boolean value indicating whether the operation succeeded.\\n     * @dev Reduces allowance by `_amount` for `spender` over the caller's tokens.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        returns (bool)\\n    {\\n        allowance[msg.sender][_spender] -= _subtractedValue;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from the caller's account to the `_to` account.\\n     * @param _to address of the recipient\\n     * @param _amount amount of tokens to transfer\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transfer(address _to, uint256 _amount)\\n        public\\n        returns (bool success)\\n    {\\n        success = _transferShares(msg.sender, _to, _tokensToShares(_amount));\\n        emit Transfer(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Transfers `_amount` tokens from `_from` to `_to` using the\\n     * allowance mechanism. `_amount` is then deducted from the caller's allowance.\\n     * @param _from address of the account to transfer tokens from\\n     * @param _to address of the recipient\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     * @dev Emits a `Transfer` event.\\n     * @dev Reduces allowance bt `_amount`\\n     * @dev The `_amount` argument is the amount of tokens, not shares.\\n     */\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) public returns (bool success) {\\n        // Underflow if not enough allowance\\n        allowance[_from][msg.sender] -= _amount;\\n        success = _transferShares(_from, _to, _tokensToShares(_amount));\\n        emit Transfer(_from, _to, _amount);\\n    }\\n\\n    // Internal functions\\n\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal returns (bool) {\\n        allowance[_owner][_spender] = _amount;\\n        emit Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `_shares` shares from `_from` to `_to`.\\n     * @dev `_from` must hold at least `_shares` shares.\\n     * @return success a boolean value indicating whether the operation succeeded.\\n     */\\n    function _transferShares(\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) private returns (bool) {\\n        shares[_from] -= _shares;\\n        // unchecked as bound by totalShares hence cannot overflow\\n        shares[_to] += _shares;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `_sharesToMint` shares and assigns them to `_account`, increasing the total amount of shares.\\n     * @dev This doesn't increase the token total supply.\\n     */\\n    function _mintShares(address _account, uint256 _sharesToMint) internal {\\n        totalShares += _sharesToMint;\\n        shares[_account] += _sharesToMint;\\n    }\\n\\n    /**\\n     * @dev Destroys `_sharesToBurn` shares from `_account`'s holdings, decreasing the total amount of shares.\\n     * @dev This doesn't decrease the token total supply.\\n     * @dev `_account` must hold at least `_sharesToBurn` shares.\\n     */\\n    function _burnShares(address _account, uint256 _sharesToBurn) internal {\\n        // Underflow if not enough shares to burn\\n        shares[_account] -= _sharesToBurn;\\n        totalShares -= _sharesToBurn;\\n    }\\n\\n    function _sharesToTokens(uint256 _shares) internal view returns (uint256) {\\n        uint256 _totalShares = totalShares;\\n        if (_totalShares == 0) return 0;\\n        return (_shares * totalSupply) / _totalShares;\\n    }\\n\\n    function _tokensToShares(uint256 _tokens) internal view returns (uint256) {\\n        uint256 _totalSupply = totalSupply;\\n        uint256 _totalShares = totalShares;\\n        if (_totalShares == 0) return _tokens;\\n        if (_totalSupply == 0) return 0;\\n        return (_tokens * _totalShares) / _totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd34bbdfad56e4e4e942367c9bd608a1ec4495fd9d294edd0dac966f5e2930a68\",\"license\":\"MIT\"},\"contracts/BridgeMessage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.15;\\n\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"./summa/TypedMemView.sol\\\";\\n\\nlibrary BridgeMessage {\\n    // ============ Libraries ============\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // ============ Enums ============\\n\\n    // WARNING: do NOT re-write the numbers / order\\n    // of message types in an upgrade;\\n    // will cause in-flight messages to be mis-interpreted\\n    // The Types enum has to do with the TypedMemView library and it defines\\n    // the types of `views` that we use in BridgeMessage. A view is not interesting data\\n    // itself, but rather it points to a specific part of the memory where\\n    // the data we care about live. When we give a `type` to a view, we define what type\\n    // is the data it points to, so that we can do easy runtime assertions without\\n    // having to fetch the whole data from memory and check for ourselves. In BridgeMessage.sol\\n    // the types of `data` we can have are defined in this enum and may belong to different taxonomies.\\n    // For example, a `Message` includes a `TokenId` and an Action, either a `Transfer` or a `TransferToHook`.\\n    // The Message is a different TYPE of data than a TokenId or Transfer, as TokenId and Transfer live inside\\n    // the message. For that reason, we define them as different data types and we add them to the same enum\\n    // for ease of use.\\n    enum Types {\\n        Invalid, // 0\\n        TokenId, // 1\\n        Message, // 2\\n        Transfer, // 3\\n        DeprecatedFastTransfer, // 4\\n        TransferToHook, // 5\\n        ExtraData, // 6\\n        UpdateSupply //7\\n    }\\n\\n    // ============ Structs ============\\n\\n    // Tokens are identified by a TokenId:\\n    // domain - 4 byte chain ID of the chain from which the token originates\\n    // id - 32 byte identifier of the token address on the origin chain, in that chain's address format\\n    struct TokenId {\\n        uint32 domain;\\n        bytes32 id;\\n    }\\n\\n    // ============ Constants ============\\n\\n    uint256 private constant TOKEN_ID_LEN = 36; // 4 bytes domain + 32 bytes id\\n    uint256 private constant IDENTIFIER_LEN = 1;\\n    uint256 private constant TRANSFER_LEN = 97; // 1 byte identifier + 32 bytes recipient + 32 bytes amount + 32 bytes detailsHash\\n    uint256 private constant MIN_TRANSFER_HOOK_LEN = 129; // 1 byte identifier + 32 bytes hook address + 32 bytes amount + 32 bytes detailsHash + 32 bytes sender + X bytes extraData\\n    uint256 private constant UPDATE_SUPPLY_LEN = 33; // 1 byte identifier + 32 bytes totalSupply\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Asserts a message is of type `_t`\\n     * @param _view The message\\n     * @param _t The expected type\\n     */\\n    modifier typeAssert(bytes29 _view, Types _t) {\\n        _view.assertType(uint40(_t));\\n        _;\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Checks that Action is valid type\\n     * @param _action The action\\n     * @return TRUE if action is valid\\n     */\\n    function isValidAction(bytes29 _action) internal pure returns (bool) {\\n        return\\n            isTransfer(_action) ||\\n            isTransferToHook(_action) ||\\n            isUpdateSupply(_action);\\n    }\\n\\n    /**\\n     * @notice Checks that view is a valid message length\\n     * @param _view The bytes string\\n     * @return TRUE if message is valid\\n     */\\n    function isValidMessageLength(bytes29 _view) internal pure returns (bool) {\\n        uint256 _len = _view.len();\\n        return\\n            _len == TOKEN_ID_LEN + TRANSFER_LEN ||\\n            _len >= TOKEN_ID_LEN + MIN_TRANSFER_HOOK_LEN ||\\n            _len == TOKEN_ID_LEN + UPDATE_SUPPLY_LEN;\\n    }\\n\\n    /**\\n     * @notice Formats an action message\\n     * @param _tokenId The token ID\\n     * @param _action The action\\n     * @return The formatted message\\n     */\\n    function formatMessage(bytes29 _tokenId, bytes29 _action)\\n        internal\\n        view\\n        typeAssert(_tokenId, Types.TokenId)\\n        returns (bytes memory)\\n    {\\n        require(isValidAction(_action), \\\"!action\\\");\\n        bytes29[] memory _views = new bytes29[](2);\\n        _views[0] = _tokenId;\\n        _views[1] = _action;\\n        return TypedMemView.join(_views);\\n    }\\n\\n    /**\\n     * @notice Returns the type of the message\\n     * @param _view The message\\n     * @return The type of the message\\n     */\\n    function messageType(bytes29 _view) internal pure returns (Types) {\\n        return Types(uint8(_view.typeOf()));\\n    }\\n\\n    /**\\n     * @notice Checks that the message is of the specified type\\n     * @param _type the type to check for\\n     * @param _action The message\\n     * @return True if the message is of the specified type\\n     */\\n    function isType(bytes29 _action, Types _type) internal pure returns (bool) {\\n        return\\n            actionType(_action) == uint8(_type) &&\\n            messageType(_action) == _type;\\n    }\\n\\n    /**\\n     * @notice Checks that the message is of type Transfer\\n     * @param _action The message\\n     * @return True if the message is of type Transfer\\n     */\\n    function isTransfer(bytes29 _action) internal pure returns (bool) {\\n        return isType(_action, Types.Transfer);\\n    }\\n\\n    /**\\n     * @notice Checks that the message is of type TransferToHook\\n     * @param _action The message\\n     * @return True if the message is of type TransferToHook\\n     */\\n    function isTransferToHook(bytes29 _action) internal pure returns (bool) {\\n        return isType(_action, Types.TransferToHook);\\n    }\\n\\n    /**\\n     * @notice Checks that the message is of type UpdateSupply\\n     * @param _action The message\\n     * @return True if the message is of type Transfer\\n     */\\n    function isUpdateSupply(bytes29 _action) internal pure returns (bool) {\\n        return isType(_action, Types.UpdateSupply);\\n    }\\n\\n    /**\\n     * @notice Formats Transfer\\n     * @param _to The recipient address as bytes32\\n     * @param _amnt The transfer amount\\n     * @param _detailsHash The hash of the token name, symbol, and decimals\\n     * @return\\n     */\\n    function formatTransfer(\\n        bytes32 _to,\\n        uint256 _amnt,\\n        bytes32 _detailsHash\\n    ) internal pure returns (bytes29) {\\n        return\\n            abi.encodePacked(Types.Transfer, _to, _amnt, _detailsHash).ref(\\n                uint40(Types.Transfer)\\n            );\\n    }\\n\\n    /**\\n     * @notice Formats TransferToHook message\\n     * @param _hook The hook that will handle this token transfer\\n     * @param _amnt The transfer amount\\n     * @param _detailsHash The hash of the token name, symbol, and decimals\\n     * @param _extraData User-provided data for the receiving hook\\n     * @return\\n     */\\n    function formatTransferToHook(\\n        bytes32 _hook,\\n        uint256 _amnt,\\n        bytes32 _detailsHash,\\n        bytes32 _sender,\\n        bytes memory _extraData\\n    ) internal pure returns (bytes29) {\\n        return\\n            abi\\n                .encodePacked(\\n                    Types.TransferToHook,\\n                    _hook,\\n                    _amnt,\\n                    _detailsHash,\\n                    _sender,\\n                    _extraData\\n                )\\n                .ref(uint40(Types.TransferToHook));\\n    }\\n\\n    /**\\n     * @notice Formats UpdateSupply\\n     * @param _supply The supply of the token on parent chain\\n     * @return\\n     */\\n    function formatUpdateSupply(uint256 _supply)\\n        internal\\n        pure\\n        returns (bytes29)\\n    {\\n        return\\n            abi.encodePacked(Types.UpdateSupply, _supply).ref(\\n                uint40(Types.UpdateSupply)\\n            );\\n    }\\n\\n    /**\\n     * @notice Serializes a Token ID struct\\n     * @param _tokenId The token id struct\\n     * @return The formatted Token ID\\n     */\\n    function formatTokenId(TokenId memory _tokenId)\\n        internal\\n        pure\\n        returns (bytes29)\\n    {\\n        return formatTokenId(_tokenId.domain, _tokenId.id);\\n    }\\n\\n    /**\\n     * @notice Creates a serialized Token ID from components\\n     * @param _domain The domain\\n     * @param _id The ID\\n     * @return The formatted Token ID\\n     */\\n    function formatTokenId(uint32 _domain, bytes32 _id)\\n        internal\\n        pure\\n        returns (bytes29)\\n    {\\n        return abi.encodePacked(_domain, _id).ref(uint40(Types.TokenId));\\n    }\\n\\n    /**\\n     * @notice Formats the keccak256 hash of the token details\\n     * Token Details Format:\\n     *      length of name cast to bytes - 32 bytes\\n     *      name - x bytes (variable)\\n     *      length of symbol cast to bytes - 32 bytes\\n     *      symbol - x bytes (variable)\\n     *      decimals - 1 byte\\n     * @param _name The name\\n     * @param _symbol The symbol\\n     * @param _decimals The decimals\\n     * @return The Details message\\n     */\\n    function getDetailsHash(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    bytes(_name).length,\\n                    _name,\\n                    bytes(_symbol).length,\\n                    _symbol,\\n                    _decimals\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Retrieves the domain from a TokenID\\n     * @param _tokenId The message\\n     * @return The domain\\n     */\\n    function domain(bytes29 _tokenId)\\n        internal\\n        pure\\n        typeAssert(_tokenId, Types.TokenId)\\n        returns (uint32)\\n    {\\n        return uint32(_tokenId.indexUint(0, 4));\\n    }\\n\\n    /**\\n     * @notice Retrieves the ID from a TokenID\\n     * @param _tokenId The message\\n     * @return The ID\\n     */\\n    function id(bytes29 _tokenId)\\n        internal\\n        pure\\n        typeAssert(_tokenId, Types.TokenId)\\n        returns (bytes32)\\n    {\\n        // before = 4 bytes domain\\n        return _tokenId.index(4, 32);\\n    }\\n\\n    /**\\n     * @notice Retrieves the EVM ID\\n     * @param _tokenId The message\\n     * @return The EVM ID\\n     */\\n    function evmId(bytes29 _tokenId)\\n        internal\\n        pure\\n        typeAssert(_tokenId, Types.TokenId)\\n        returns (address)\\n    {\\n        // before = 4 bytes domain + 12 bytes empty to trim for address\\n        return _tokenId.indexAddress(16);\\n    }\\n\\n    /**\\n     * @notice Retrieves the action identifier from message\\n     * @param _message The action\\n     * @return The message type\\n     */\\n    function msgType(bytes29 _message) internal pure returns (uint8) {\\n        return uint8(_message.indexUint(TOKEN_ID_LEN, 1));\\n    }\\n\\n    /**\\n     * @notice Retrieves the identifier from action\\n     * @param _action The action\\n     * @return The action type\\n     */\\n    function actionType(bytes29 _action) internal pure returns (uint8) {\\n        return uint8(_action.indexUint(0, 1));\\n    }\\n\\n    /**\\n     * @notice Retrieves the recipient from a Transfer\\n     * @param _transferAction The message\\n     * @return The recipient address as bytes32\\n     */\\n    function recipient(bytes29 _transferAction)\\n        internal\\n        pure\\n        typeAssert(_transferAction, Types.Transfer)\\n        returns (bytes32)\\n    {\\n        // before = 1 byte identifier\\n        return _transferAction.index(1, 32);\\n    }\\n\\n    /**\\n     * @notice Retrieves the EVM Recipient from a Transfer\\n     * @param _transferAction The message\\n     * @return The EVM Recipient\\n     */\\n    function evmRecipient(bytes29 _transferAction)\\n        internal\\n        pure\\n        typeAssert(_transferAction, Types.Transfer)\\n        returns (address)\\n    {\\n        // before = 1 byte identifier + 12 bytes empty to trim for address = 13 bytes\\n        return _transferAction.indexAddress(13);\\n    }\\n\\n    /**\\n     * @notice Retrieves the amount from a Transfer\\n     * @param _transferAction The message\\n     * @return The amount\\n     */\\n    function amnt(bytes29 _transferAction) internal pure returns (uint256) {\\n        // before = 1 byte identifier + 32 bytes ID = 33 bytes\\n        return _transferAction.indexUint(33, 32);\\n    }\\n\\n    /**\\n     * @notice Retrieves the detailsHash from a Transfer\\n     * @param _transferAction The message\\n     * @return The detailsHash\\n     */\\n    function detailsHash(bytes29 _transferAction)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        // before = 1 byte identifier + 32 bytes ID + 32 bytes amount = 65 bytes\\n        return _transferAction.index(65, 32);\\n    }\\n\\n    /**\\n     * @notice Retrieves the token ID from a Message\\n     * @param _message The message\\n     * @return The ID\\n     */\\n    function tokenId(bytes29 _message)\\n        internal\\n        pure\\n        typeAssert(_message, Types.Message)\\n        returns (bytes29)\\n    {\\n        return _message.slice(0, TOKEN_ID_LEN, uint40(Types.TokenId));\\n    }\\n\\n    /**\\n     * @notice Retrieves the hook contract EVM address from a TransferWithHook\\n     * @param _transferAction The message\\n     * @return The hook contract address\\n     */\\n    function evmHook(bytes29 _transferAction)\\n        internal\\n        pure\\n        typeAssert(_transferAction, Types.TransferToHook)\\n        returns (address)\\n    {\\n        return _transferAction.indexAddress(13);\\n    }\\n\\n    /**\\n     * @notice Retrieves the sender from a TransferWithHook\\n     * @param _transferAction The message\\n     * @return The sender as bytes32\\n     */\\n    function sender(bytes29 _transferAction)\\n        internal\\n        pure\\n        typeAssert(_transferAction, Types.TransferToHook)\\n        returns (bytes32)\\n    {\\n        // before = 1 byte identifier + 32 bytes hook address + 32 bytes amount + 32 bytes detailsHash = 97\\n        return _transferAction.index(97, 32);\\n    }\\n\\n    /**\\n     * @notice Retrieves the extra data from a TransferWithHook\\n     * @param _transferAction The message\\n     * @return A TypedMemview of extraData\\n     */\\n    function extraData(bytes29 _transferAction)\\n        internal\\n        pure\\n        typeAssert(_transferAction, Types.TransferToHook)\\n        returns (bytes29)\\n    {\\n        // anything past the end is the extradata\\n        return\\n            _transferAction.slice(\\n                MIN_TRANSFER_HOOK_LEN,\\n                _transferAction.len() - MIN_TRANSFER_HOOK_LEN,\\n                uint40(Types.ExtraData)\\n            );\\n    }\\n\\n    /**\\n     * @notice Retrieves the new supply of the token on parent chain with UpdateSupply action type\\n     * @param _updateSupplyAction The message\\n     * @return The amount as bytes32\\n     */\\n    function supply(bytes29 _updateSupplyAction)\\n        internal\\n        pure\\n        typeAssert(_updateSupplyAction, Types.UpdateSupply)\\n        returns (uint256)\\n    {\\n        // before = 1 byte identifier + 32 bytes uint256 supply = 33\\n        return _updateSupplyAction.indexUint(33, 32);\\n    }\\n\\n    /**\\n     * @notice Retrieves the action data from a Message\\n     * @param _message The message\\n     * @return The action\\n     */\\n    function action(bytes29 _message)\\n        internal\\n        pure\\n        typeAssert(_message, Types.Message)\\n        returns (bytes29)\\n    {\\n        uint256 _actionLen = _message.len() - TOKEN_ID_LEN;\\n        uint40 _type = uint40(msgType(_message));\\n        return _message.slice(TOKEN_ID_LEN, _actionLen, _type);\\n    }\\n\\n    /**\\n     * @notice Converts to a Message\\n     * @param _message The message\\n     * @return The newly typed message\\n     */\\n    function tryAsMessage(bytes29 _message) internal pure returns (bytes29) {\\n        if (isValidMessageLength(_message)) {\\n            return _message.castTo(uint40(Types.Message));\\n        }\\n        return TypedMemView.nullView();\\n    }\\n\\n    /**\\n     * @notice Asserts that the message is of type Message\\n     * @param _view The message\\n     * @return The message\\n     */\\n    function mustBeMessage(bytes29 _view) internal pure returns (bytes29) {\\n        return tryAsMessage(_view).assertValid();\\n    }\\n}\\n\",\"keccak256\":\"0xf2ec03ef710a64c7ab30753f0ac8f5ff22d2e6061c6f86dcd2d824c73606461b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/TokenRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.15;\\n\\n// ============ Local Contracts ============\\nimport {BridgeMessage} from \\\"./BridgeMessage.sol\\\";\\nimport {Encoding} from \\\"./utils/Encoding.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ABridgeToken} from \\\"./ABridgeToken.sol\\\";\\n\\n// ============ External Contracts ============\\nimport {XAppConnectionClient} from \\\"./nomad/router/XAppConnectionClient.sol\\\";\\nimport {TypeCasts} from \\\"./nomad/core/XAppConnectionManager.sol\\\";\\nimport {UpgradeBeaconProxy} from \\\"./nomad/core/upgrade/UpgradeBeaconProxy.sol\\\";\\nimport {TypedMemView} from \\\"./summa/TypedMemView.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title TokenRegistry\\n * @notice manages a registry of token contracts on this chain\\n * -\\n * We sort token types as \\\"representation token\\\" or \\\"locally originating token\\\".\\n * Locally originating - a token contract that was originally deployed on the local chain\\n * Representation (repr) - a token that was originally deployed on some other chain\\n * -\\n * When the BridgeRouter handles an incoming message, it determines whether the\\n * transfer is for an asset of local origin. If not, it checks for an existing\\n * representation contract. If no such representation exists, it deploys a new\\n * representation contract. It then stores the relationship in the\\n * \\\"reprToCanonical\\\" and \\\"canonicalToRepr\\\" mappings to ensure we can always\\n * perform a lookup in either direction\\n * Note that locally originating tokens should NEVER be represented in these lookup tables.\\n */\\ncontract TokenRegistry is Initializable, XAppConnectionClient {\\n    // ============ Libraries ============\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using BridgeMessage for bytes29;\\n\\n    // ============ Public Storage ============\\n\\n    // UpgradeBeacon from which new token proxies will get their implementation\\n    address public tokenBeacon;\\n    // local representation token address => token ID\\n    mapping(address => BridgeMessage.TokenId) public representationToCanonical;\\n    // hash of the tightly-packed TokenId => local representation token address\\n    // If the token is of local origin, this MUST map to address(0).\\n    mapping(bytes32 => address) public canonicalToRepresentation;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice emitted when a representation token contract is deployed\\n     * @param domain the domain of the chain where the canonical asset is deployed\\n     * @param id the bytes32 address of the canonical token contract\\n     * @param representation the address of the newly locally deployed representation contract\\n     */\\n    event TokenDeployed(\\n        uint32 indexed domain,\\n        bytes32 indexed id,\\n        address indexed representation\\n    );\\n\\n    // ======== Initializer =========\\n\\n    function initialize(address _tokenBeacon, address _xAppConnectionManager)\\n        public\\n        initializer\\n    {\\n        tokenBeacon = _tokenBeacon;\\n        __XAppConnectionClient_initialize(_xAppConnectionManager);\\n    }\\n\\n    // ======== TokenId & Address Lookup for Representation Tokens =========\\n\\n    /**\\n     * @notice Look up the canonical token ID for a representation token\\n     * @param _representation the address of the representation contract\\n     * @return _domain the domain of the canonical version.\\n     * @return _id the identifier of the canonical version in its domain.\\n     */\\n    function getCanonicalTokenId(address _representation)\\n        external\\n        view\\n        returns (uint32 _domain, bytes32 _id)\\n    {\\n        BridgeMessage.TokenId memory _canonical = representationToCanonical[\\n            _representation\\n        ];\\n        _domain = _canonical.domain;\\n        _id = _canonical.id;\\n    }\\n\\n    /**\\n     * @notice Look up the representation address for a canonical token\\n     * @param _domain the domain of the canonical version.\\n     * @param _id the identifier of the canonical version in its domain.\\n     * @return _representation the address of the representation contract\\n     */\\n    function getRepresentationAddress(uint32 _domain, bytes32 _id)\\n        public\\n        view\\n        returns (address _representation)\\n    {\\n        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\n        bytes32 _idHash = _tokenId.keccak();\\n        _representation = canonicalToRepresentation[_idHash];\\n    }\\n\\n    // ======== External: Deploying Representation Tokens =========\\n\\n    /**\\n     * @notice Get the address of the local token for the provided tokenId;\\n     * if the token is remote and no local representation exists, deploy the representation contract\\n     * @param _domain the token's native domain\\n     * @param _id the token's id on its native domain\\n     * @return _local the address of the local token contract\\n     */\\n    function ensureLocalToken(uint32 _domain, bytes32 _id)\\n        external\\n        onlyOwner\\n        returns (address _local)\\n    {\\n        _local = getLocalAddress(_domain, _id);\\n        if (_local == address(0)) {\\n            // Representation does not exist yet;\\n            // deploy representation contract\\n            _local = _deployToken(_domain, _id);\\n        }\\n    }\\n\\n    // ======== TokenId & Address Lookup for ALL Local Tokens (Representation AND Canonical) =========\\n\\n    /**\\n     * @notice Return tokenId for a local token address\\n     * @param _local the local address of the token contract (representation or canonical)\\n     * @return _domain canonical domain\\n     * @return _id canonical identifier on that domain\\n     */\\n    function getTokenId(address _local)\\n        external\\n        view\\n        returns (uint32 _domain, bytes32 _id)\\n    {\\n        BridgeMessage.TokenId memory _tokenId = representationToCanonical[\\n            _local\\n        ];\\n        if (_tokenId.domain == 0) {\\n            _domain = _localDomain();\\n            _id = TypeCasts.addressToBytes32(_local);\\n        } else {\\n            _domain = _tokenId.domain;\\n            _id = _tokenId.id;\\n        }\\n    }\\n\\n    /**\\n     * @notice Looks up the local address corresponding to a domain/id pair.\\n     * @dev If the token is local, it will return the local address.\\n     * If the token is non-local and no local representation exists, this\\n     * will return `address(0)`.\\n     * @param _domain the domain of the canonical version.\\n     * @param _id the identifier of the canonical version in its domain.\\n     * @return _local the local address of the token contract (representation or canonical)\\n     */\\n    function getLocalAddress(uint32 _domain, address _id)\\n        external\\n        view\\n        returns (address _local)\\n    {\\n        _local = getLocalAddress(_domain, TypeCasts.addressToBytes32(_id));\\n    }\\n\\n    /**\\n     * @notice Looks up the local address corresponding to a domain/id pair.\\n     * @dev If the token is local, it will return the local address.\\n     * If the token is non-local and no local representation exists, this\\n     * will return `address(0)`.\\n     * @param _domain the domain of the canonical version.\\n     * @param _id the identifier of the canonical version in its domain.\\n     * @return _local the local address of the token contract (representation or canonical)\\n     */\\n    function getLocalAddress(uint32 _domain, bytes32 _id)\\n        public\\n        view\\n        returns (address _local)\\n    {\\n        if (_domain == _localDomain()) {\\n            // Token is of local origin\\n            _local = TypeCasts.bytes32ToAddress(_id);\\n        } else {\\n            // Token is a representation of a token of remote origin\\n            _local = getRepresentationAddress(_domain, _id);\\n        }\\n    }\\n\\n    /**\\n     * @notice Return the local token contract for the\\n     * canonical tokenId; revert if there is no local token\\n     * @param _domain the token's native domain\\n     * @param _id the token's id on its native domain\\n     * @return the local IERC20 token contract\\n     */\\n    function mustHaveLocalToken(uint32 _domain, bytes32 _id)\\n        external\\n        view\\n        returns (IERC20)\\n    {\\n        address _local = getLocalAddress(_domain, _id);\\n        require(_local != address(0), \\\"!token\\\");\\n        return IERC20(_local);\\n    }\\n\\n    /**\\n     * @notice Determine if token is of local origin\\n     * @return TRUE if token is locally originating\\n     */\\n    function isLocalOrigin(address _token) external view returns (bool) {\\n        // If the contract WAS deployed by the TokenRegistry,\\n        // it will be stored in this mapping.\\n        // If so, it IS NOT of local origin\\n        if (representationToCanonical[_token].domain != 0) {\\n            return false;\\n        }\\n        // If the contract WAS NOT deployed by the TokenRegistry,\\n        // and the contract exists, then it IS of local origin\\n        // Return true if code exists at _addr\\n        uint256 _codeSize;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _codeSize := extcodesize(_token)\\n        }\\n        return _codeSize != 0;\\n    }\\n\\n    // ======== Internal Functions =========\\n\\n    /**\\n     * @notice Set the primary representation for a given canonical\\n     * @param _domain the domain of the canonical token\\n     * @param _id the bytes32 ID pf the canonical of the token\\n     * @param _representation the address of the representation token\\n     */\\n    function _setRepresentationToCanonical(\\n        uint32 _domain,\\n        bytes32 _id,\\n        address _representation\\n    ) internal {\\n        representationToCanonical[_representation].domain = _domain;\\n        representationToCanonical[_representation].id = _id;\\n    }\\n\\n    /**\\n     * @notice Set the canonical token for a given representation\\n     * @param _domain the domain of the canonical token\\n     * @param _id the bytes32 ID pf the canonical of the token\\n     * @param _representation the address of the representation token\\n     */\\n    function _setCanonicalToRepresentation(\\n        uint32 _domain,\\n        bytes32 _id,\\n        address _representation\\n    ) internal {\\n        bytes29 _tokenId = BridgeMessage.formatTokenId(_domain, _id);\\n        bytes32 _idHash = _tokenId.keccak();\\n        canonicalToRepresentation[_idHash] = _representation;\\n    }\\n\\n    /**\\n     * @notice Deploy and initialize a new token contract\\n     * @dev Each token contract is a proxy which\\n     * points to the token upgrade beacon\\n     * @return _token the address of the token contract\\n     */\\n    function _deployToken(uint32 _domain, bytes32 _id)\\n        internal\\n        returns (address _token)\\n    {\\n        // deploy and initialize the token contract\\n        _token = address(new UpgradeBeaconProxy(tokenBeacon, \\\"\\\"));\\n        // Initialize the token. Normally we initialize during proxy deployment\\n        // but due to a proxy quirk, it's clearer to do it explicitly when\\n        // calling an initializer with no arguments.\\n        ABridgeToken(_token).initialize();\\n        // set the default token name & symbol\\n        (string memory _name, string memory _symbol) = _defaultDetails(\\n            _domain,\\n            _id\\n        );\\n        ABridgeToken(_token).setDetails(_name, _symbol, 18);\\n        // transfer ownership to bridgeRouter\\n        ABridgeToken(_token).transferOwnership(owner());\\n        // store token in mappings\\n        _setCanonicalToRepresentation(_domain, _id, _token);\\n        _setRepresentationToCanonical(_domain, _id, _token);\\n        // emit event upon deploying new token\\n        emit TokenDeployed(_domain, _id, _token);\\n    }\\n\\n    /**\\n     * @notice Get default name and details for a token\\n     *         Sets name to \\\"[domain].[id]\\\", and symbol to the first 15\\n     *         bytes of the name.\\n     * @dev Symbol of 15 bytes is chosen to ensure we don't accidentally break\\n     *      the foxy wallet\\n     * @param _domain the domain of the canonical token\\n     * @param _id the bytes32 ID pf the canonical of the token\\n     */\\n    function _defaultDetails(uint32 _domain, bytes32 _id)\\n        internal\\n        pure\\n        returns (string memory _name, string memory _symbol)\\n    {\\n        // get the first and second half of the token ID\\n        (, uint256 _secondHalfId) = Encoding.encodeHex(uint256(_id));\\n        // encode the default token name: \\\"[decimal domain].[hex 4 bytes of ID]\\\"\\n        _name = string(\\n            abi.encodePacked(\\n                Encoding.decimalUint32(_domain), // 10\\n                \\\".\\\", // 1\\n                uint32(_secondHalfId) // 4\\n            )\\n        );\\n        // allocate the memory for a new 15-byte string\\n        _symbol = new string(10 + 1 + 4);\\n        assembly {\\n            mstore(add(_symbol, 0x20), mload(add(_name, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev explicit override for compiler inheritance\\n     * @dev explicit override for compiler inheritance\\n     * @return domain of chain on which the contract is deployed\\n     */\\n    function _localDomain()\\n        internal\\n        view\\n        override(XAppConnectionClient)\\n        returns (uint32)\\n    {\\n        return XAppConnectionClient._localDomain();\\n    }\\n\\n    /**\\n     * @dev should be impossible to renounce ownership;\\n     * we override OpenZeppelin OwnableUpgradeable's\\n     * implementation of renounceOwnership to make it a no-op\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // do nothing\\n    }\\n}\\n\",\"keccak256\":\"0x786fdd3998d93454c72594e7e329620e7d9c07ea136d52f2cd1f3d9a206feef7\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/Home.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\nimport {QueueLib} from \\\"./libs/Queue.sol\\\";\\nimport {MerkleLib} from \\\"./libs/Merkle.sol\\\";\\nimport {Message} from \\\"./libs/Message.sol\\\";\\nimport {MerkleTreeManager} from \\\"./Merkle.sol\\\";\\nimport {QueueManager} from \\\"./Queue.sol\\\";\\nimport {IUpdaterManager} from \\\"./interfaces/IUpdaterManager.sol\\\";\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title Home\\n * @author Illusory Systems Inc.\\n * @notice Accepts messages to be dispatched to remote chains,\\n * constructs a Merkle tree of the messages,\\n * and accepts signatures from a bonded Updater\\n * which notarize the Merkle tree roots.\\n * Accepts submissions of fraudulent signatures\\n * by the Updater and slashes the Updater in this case.\\n */\\ncontract Home is Version0, QueueManager, MerkleTreeManager, NomadBase {\\n    // ============ Libraries ============\\n\\n    using QueueLib for QueueLib.Queue;\\n    using MerkleLib for MerkleLib.Tree;\\n\\n    // ============ Constants ============\\n\\n    // Maximum bytes per message = 2 KiB\\n    // (somewhat arbitrarily set to begin)\\n    uint256 public constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\\n\\n    // ============ Public Storage Variables ============\\n\\n    // domain => next available nonce for the domain\\n    mapping(uint32 => uint32) public nonces;\\n    // contract responsible for Updater bonding, slashing and rotation\\n    IUpdaterManager public updaterManager;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[48] private __GAP;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when a new message is dispatched via Nomad\\n     * @param messageHash Hash of message; the leaf inserted to the Merkle tree\\n     *        for the message\\n     * @param leafIndex Index of message's leaf in merkle tree\\n     * @param destinationAndNonce Destination and destination-specific\\n     *        nonce combined in single field ((destination << 32) & nonce)\\n     * @param committedRoot the latest notarized root submitted in the last\\n     *        signed Update\\n     * @param message Raw bytes of message\\n     */\\n    event Dispatch(\\n        bytes32 indexed messageHash,\\n        uint256 indexed leafIndex,\\n        uint64 indexed destinationAndNonce,\\n        bytes32 committedRoot,\\n        bytes message\\n    );\\n\\n    /**\\n     * @notice Emitted when proof of an improper update is submitted,\\n     * which sets the contract to FAILED state\\n     * @param oldRoot Old root of the improper update\\n     * @param newRoot New root of the improper update\\n     * @param signature Signature on `oldRoot` and `newRoot\\n     */\\n    event ImproperUpdate(bytes32 oldRoot, bytes32 newRoot, bytes signature);\\n\\n    /**\\n     * @notice Emitted when proof of a double update is submitted,\\n     * which sets the contract to FAILED state\\n     * @param oldRoot Old root shared between two conflicting updates\\n     * @param newRoot Array containing two conflicting new roots\\n     * @param signature Signature on `oldRoot` and `newRoot`[0]\\n     * @param signature2 Signature on `oldRoot` and `newRoot`[1]\\n     */\\n    event DoubleUpdate(\\n        bytes32 oldRoot,\\n        bytes32[2] newRoot,\\n        bytes signature,\\n        bytes signature2\\n    );\\n\\n    /**\\n     * @notice Emitted when the Updater is slashed\\n     * (should be paired with ImproperUpdater or DoubleUpdate event)\\n     * @param updater The address of the updater\\n     * @param reporter The address of the entity that reported the updater misbehavior\\n     */\\n    event UpdaterSlashed(address indexed updater, address indexed reporter);\\n\\n    /**\\n     * @notice Emitted when the UpdaterManager contract is changed\\n     * @param updaterManager The address of the new updaterManager\\n     */\\n    event NewUpdaterManager(address updaterManager);\\n\\n    // ============ Constructor ============\\n\\n    constructor(uint32 _localDomain) NomadBase(_localDomain) {} // solhint-disable-line no-empty-blocks\\n\\n    // ============ Initializer ============\\n\\n    function initialize(IUpdaterManager _updaterManager) public initializer {\\n        // initialize queue, set Updater Manager, and initialize\\n        __QueueManager_initialize();\\n        _setUpdaterManager(_updaterManager);\\n        __NomadBase_initialize(updaterManager.updater());\\n    }\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Ensures that function is called by the UpdaterManager contract\\n     */\\n    modifier onlyUpdaterManager() {\\n        require(msg.sender == address(updaterManager), \\\"!updaterManager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Ensures that contract state != FAILED when the function is called\\n     */\\n    modifier notFailed() {\\n        require(state != States.Failed, \\\"failed state\\\");\\n        _;\\n    }\\n\\n    // ============ External: Updater & UpdaterManager Configuration  ============\\n\\n    /**\\n     * @notice Set a new Updater\\n     * @dev To be set when rotating Updater after Fraud\\n     * @param _updater the new Updater\\n     */\\n    function setUpdater(address _updater) external onlyUpdaterManager {\\n        _setUpdater(_updater);\\n        // set the Home state to Active\\n        // now that Updater has been rotated\\n        state = States.Active;\\n    }\\n\\n    /**\\n     * @notice Set a new UpdaterManager contract\\n     * @dev Home(s) will initially be initialized using a trusted UpdaterManager contract;\\n     * we will progressively decentralize by swapping the trusted contract with a new implementation\\n     * that implements Updater bonding & slashing, and rules for Updater selection & rotation\\n     * @param _updaterManager the new UpdaterManager contract\\n     */\\n    function setUpdaterManager(address _updaterManager) external onlyOwner {\\n        _setUpdaterManager(IUpdaterManager(_updaterManager));\\n    }\\n\\n    // ============ External Functions  ============\\n\\n    /**\\n     * @notice Dispatch the message to the destination domain & recipient\\n     * @dev Format the message, insert its hash into Merkle tree,\\n     * enqueue the new Merkle root, and emit `Dispatch` event with message information.\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipientAddress Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes content of message\\n     */\\n    function dispatch(\\n        uint32 _destinationDomain,\\n        bytes32 _recipientAddress,\\n        bytes memory _messageBody\\n    ) external notFailed {\\n        require(_messageBody.length <= MAX_MESSAGE_BODY_BYTES, \\\"msg too long\\\");\\n        // get the next nonce for the destination domain, then increment it\\n        uint32 _nonce = nonces[_destinationDomain];\\n        nonces[_destinationDomain] = _nonce + 1;\\n        // format the message into packed bytes\\n        bytes memory _message = Message.formatMessage(\\n            localDomain,\\n            bytes32(uint256(uint160(msg.sender))),\\n            _nonce,\\n            _destinationDomain,\\n            _recipientAddress,\\n            _messageBody\\n        );\\n        // insert the hashed message into the Merkle tree\\n        bytes32 _messageHash = keccak256(_message);\\n        tree.insert(_messageHash);\\n        // enqueue the new Merkle root after inserting the message\\n        queue.enqueue(root());\\n        // Emit Dispatch event with message information\\n        // note: leafIndex is count() - 1 since new leaf has already been inserted\\n        emit Dispatch(\\n            _messageHash,\\n            count() - 1,\\n            _destinationAndNonce(_destinationDomain, _nonce),\\n            committedRoot,\\n            _message\\n        );\\n    }\\n\\n    /**\\n     * @notice Submit a signature from the Updater \\\"notarizing\\\" a root,\\n     * which updates the Home contract's `committedRoot`,\\n     * and publishes the signature which will be relayed to Replica contracts\\n     * @dev emits Update event\\n     * @dev If _newRoot is not contained in the queue,\\n     * the Update is a fraudulent Improper Update, so\\n     * the Updater is slashed & Home is set to FAILED state\\n     * @param _committedRoot Current updated merkle root which the update is building off of\\n     * @param _newRoot New merkle root to update the contract state to\\n     * @param _signature Updater signature on `_committedRoot` and `_newRoot`\\n     */\\n    function update(\\n        bytes32 _committedRoot,\\n        bytes32 _newRoot,\\n        bytes memory _signature\\n    ) external notFailed {\\n        // check that the update is not fraudulent;\\n        // if fraud is detected, Updater is slashed & Home is set to FAILED state\\n        if (improperUpdate(_committedRoot, _newRoot, _signature)) return;\\n        // clear all of the intermediate roots contained in this update from the queue\\n        while (true) {\\n            bytes32 _next = queue.dequeue();\\n            if (_next == _newRoot) break;\\n        }\\n        // update the Home state with the latest signed root & emit event\\n        committedRoot = _newRoot;\\n        emit Update(localDomain, _committedRoot, _newRoot, _signature);\\n    }\\n\\n    /**\\n     * @notice Suggest an update for the Updater to sign and submit.\\n     * @dev If queue is empty, null bytes returned for both\\n     * (No update is necessary because no messages have been dispatched since the last update)\\n     * @return _committedRoot Latest root signed by the Updater\\n     * @return _new Latest enqueued Merkle root\\n     */\\n    function suggestUpdate()\\n        external\\n        view\\n        returns (bytes32 _committedRoot, bytes32 _new)\\n    {\\n        if (queue.length() != 0) {\\n            _committedRoot = committedRoot;\\n            _new = queue.lastItem();\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by external agent. Checks that signatures on two sets of\\n     * roots are valid and that the new roots conflict with each other. If both\\n     * cases hold true, the contract is failed and a `DoubleUpdate` event is\\n     * emitted.\\n     * @dev When `fail()` is called on Home, updater is slashed.\\n     * @param _oldRoot Old root shared between two conflicting updates\\n     * @param _newRoot Array containing two conflicting new roots\\n     * @param _signature Signature on `_oldRoot` and `_newRoot`[0]\\n     * @param _signature2 Signature on `_oldRoot` and `_newRoot`[1]\\n     */\\n    function doubleUpdate(\\n        bytes32 _oldRoot,\\n        bytes32[2] calldata _newRoot,\\n        bytes calldata _signature,\\n        bytes calldata _signature2\\n    ) external notFailed {\\n        if (\\n            NomadBase._isUpdaterSignature(_oldRoot, _newRoot[0], _signature) &&\\n            NomadBase._isUpdaterSignature(_oldRoot, _newRoot[1], _signature2) &&\\n            _newRoot[0] != _newRoot[1]\\n        ) {\\n            _fail();\\n            emit DoubleUpdate(_oldRoot, _newRoot, _signature, _signature2);\\n        }\\n    }\\n\\n    // ============ Public Functions  ============\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n     */\\n    function homeDomainHash() public view override returns (bytes32) {\\n        return _homeDomainHash(localDomain);\\n    }\\n\\n    /**\\n     * @notice Check if an Update is an Improper Update;\\n     * if so, slash the Updater and set the contract to FAILED state.\\n     *\\n     * An Improper Update is an update building off of the Home's `committedRoot`\\n     * for which the `_newRoot` does not currently exist in the Home's queue.\\n     * This would mean that message(s) that were not truly\\n     * dispatched on Home were falsely included in the signed root.\\n     *\\n     * An Improper Update will only be accepted as valid by the Replica\\n     * If an Improper Update is attempted on Home,\\n     * the Updater will be slashed immediately.\\n     * If an Improper Update is submitted to the Replica,\\n     * it should be relayed to the Home contract using this function\\n     * in order to slash the Updater with an Improper Update.\\n     *\\n     * An Improper Update submitted to the Replica is only valid\\n     * while the `_oldRoot` is still equal to the `committedRoot` on Home;\\n     * if the `committedRoot` on Home has already been updated with a valid Update,\\n     * then the Updater should be slashed with a Double Update.\\n     * @dev Reverts (and doesn't slash updater) if signature is invalid or\\n     * update not current\\n     * @param _oldRoot Old merkle tree root (should equal home's committedRoot)\\n     * @param _newRoot New merkle tree root\\n     * @param _signature Updater signature on `_oldRoot` and `_newRoot`\\n     * @return TRUE if update was an Improper Update (implying Updater was slashed)\\n     */\\n    function improperUpdate(\\n        bytes32 _oldRoot,\\n        bytes32 _newRoot,\\n        bytes memory _signature\\n    ) public notFailed returns (bool) {\\n        require(\\n            _isUpdaterSignature(_oldRoot, _newRoot, _signature),\\n            \\\"!updater sig\\\"\\n        );\\n        require(_oldRoot == committedRoot, \\\"not a current update\\\");\\n        // if the _newRoot is not currently contained in the queue,\\n        // slash the Updater and set the contract to FAILED state\\n        if (!queue.contains(_newRoot)) {\\n            _fail();\\n            emit ImproperUpdate(_oldRoot, _newRoot, _signature);\\n            return true;\\n        }\\n        // if the _newRoot is contained in the queue,\\n        // this is not an improper update\\n        return false;\\n    }\\n\\n    // ============ Internal Functions  ============\\n\\n    /**\\n     * @notice Set the UpdaterManager\\n     * @param _updaterManager Address of the UpdaterManager\\n     */\\n    function _setUpdaterManager(IUpdaterManager _updaterManager) internal {\\n        require(\\n            Address.isContract(address(_updaterManager)),\\n            \\\"!contract updaterManager\\\"\\n        );\\n        updaterManager = IUpdaterManager(_updaterManager);\\n        emit NewUpdaterManager(address(_updaterManager));\\n    }\\n\\n    /**\\n     * @notice Slash the Updater and set contract state to FAILED\\n     * @dev Called when fraud is proven (Improper Update or Double Update)\\n     */\\n    function _fail() internal {\\n        // set contract to FAILED\\n        state = States.Failed;\\n        // slash Updater\\n        updaterManager.slashUpdater(payable(msg.sender));\\n        emit UpdaterSlashed(updater, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Internal utility function that combines\\n     * `_destination` and `_nonce`.\\n     * @dev Both destination and nonce should be less than 2^32 - 1\\n     * @param _destination Domain of destination chain\\n     * @param _nonce Current nonce for given destination chain\\n     * @return Returns (`_destination` << 32) & `_nonce`\\n     */\\n    function _destinationAndNonce(uint32 _destination, uint32 _nonce)\\n        internal\\n        pure\\n        returns (uint64)\\n    {\\n        return (uint64(_destination) << 32) | _nonce;\\n    }\\n}\\n\",\"keccak256\":\"0x442d3d204fd22694bf8e97f2b4921102f775cd3d5401a4aee5a6fbd9ed5fde1a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {MerkleLib} from \\\"./libs/Merkle.sol\\\";\\n\\n/**\\n * @title MerkleTreeManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a Merkle tree instance and\\n * exposes view functions for the tree.\\n */\\ncontract MerkleTreeManager {\\n    // ============ Libraries ============\\n\\n    using MerkleLib for MerkleLib.Tree;\\n    MerkleLib.Tree public tree;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[49] private __GAP;\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Calculates and returns tree's current root\\n     */\\n    function root() public view returns (bytes32) {\\n        return tree.root();\\n    }\\n\\n    /**\\n     * @notice Returns the number of inserted leaves in the tree (current index)\\n     */\\n    function count() public view returns (uint256) {\\n        return tree.count;\\n    }\\n}\\n\",\"keccak256\":\"0x278aac8d047133c733728c5db6bfba9111a0dd938fa9a43ebafc0d37e12fe0d6\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/NomadBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {Message} from \\\"./libs/Message.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title NomadBase\\n * @author Illusory Systems Inc.\\n * @notice Shared utilities between Home and Replica.\\n */\\nabstract contract NomadBase is Initializable, OwnableUpgradeable {\\n    // ============ Enums ============\\n\\n    // States:\\n    //   0 - UnInitialized - before initialize function is called\\n    //   note: the contract is initialized at deploy time, so it should never be in this state\\n    //   1 - Active - as long as the contract has not become fraudulent\\n    //   2 - Failed - after a valid fraud proof has been submitted;\\n    //   contract will no longer accept updates or new messages\\n    enum States {\\n        UnInitialized,\\n        Active,\\n        Failed\\n    }\\n\\n    // ============ Immutable Variables ============\\n\\n    // Domain of chain on which the contract is deployed\\n    uint32 public immutable localDomain;\\n\\n    // ============ Public Variables ============\\n\\n    // Address of bonded Updater\\n    address public updater;\\n    // Current state of contract\\n    States public state;\\n    // The latest root that has been signed by the Updater\\n    bytes32 public committedRoot;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[47] private __GAP;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when update is made on Home\\n     * or unconfirmed update root is submitted on Replica\\n     * @param homeDomain Domain of home contract\\n     * @param oldRoot Old merkle root\\n     * @param newRoot New merkle root\\n     * @param signature Updater's signature on `oldRoot` and `newRoot`\\n     */\\n    event Update(\\n        uint32 indexed homeDomain,\\n        bytes32 indexed oldRoot,\\n        bytes32 indexed newRoot,\\n        bytes signature\\n    );\\n\\n    /**\\n     * @notice Emitted when Updater is rotated\\n     * @param oldUpdater The address of the old updater\\n     * @param newUpdater The address of the new updater\\n     */\\n    event NewUpdater(address oldUpdater, address newUpdater);\\n\\n    // ============ Constructor ============\\n\\n    constructor(uint32 _localDomain) {\\n        localDomain = _localDomain;\\n    }\\n\\n    // ============ Initializer ============\\n\\n    function __NomadBase_initialize(address _updater) internal initializer {\\n        __Ownable_init();\\n        _setUpdater(_updater);\\n        state = States.Active;\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n     */\\n    function homeDomainHash() public view virtual returns (bytes32);\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n     * @param _homeDomain the Home domain to hash\\n     */\\n    function _homeDomainHash(uint32 _homeDomain)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(_homeDomain, \\\"NOMAD\\\"));\\n    }\\n\\n    /**\\n     * @notice Set the Updater\\n     * @param _newUpdater Address of the new Updater\\n     */\\n    function _setUpdater(address _newUpdater) internal {\\n        address _oldUpdater = updater;\\n        updater = _newUpdater;\\n        emit NewUpdater(_oldUpdater, _newUpdater);\\n    }\\n\\n    /**\\n     * @notice Checks that signature was signed by Updater\\n     * @param _oldRoot Old merkle root\\n     * @param _newRoot New merkle root\\n     * @param _signature Signature on `_oldRoot` and `_newRoot`\\n     * @return TRUE iff signature is valid signed by updater\\n     **/\\n    function _isUpdaterSignature(\\n        bytes32 _oldRoot,\\n        bytes32 _newRoot,\\n        bytes memory _signature\\n    ) internal view returns (bool) {\\n        bytes32 _digest = keccak256(\\n            abi.encodePacked(homeDomainHash(), _oldRoot, _newRoot)\\n        );\\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\\n        return (ECDSA.recover(_digest, _signature) == updater);\\n    }\\n\\n    /**\\n     * @dev should be impossible to renounce ownership;\\n     * we override OpenZeppelin OwnableUpgradeable's\\n     * implementation of renounceOwnership to make it a no-op\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // do nothing\\n    }\\n}\\n\",\"keccak256\":\"0x0f24e0c14f643c4d7239358fceaa0df4db29a481e9decb1c83657d956d8bf088\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {QueueLib} from \\\"./libs/Queue.sol\\\";\\n// ============ External Imports ============\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title QueueManager\\n * @author Illusory Systems Inc.\\n * @notice Contains a queue instance and\\n * exposes view functions for the queue.\\n **/\\ncontract QueueManager is Initializable {\\n    // ============ Libraries ============\\n\\n    using QueueLib for QueueLib.Queue;\\n    QueueLib.Queue internal queue;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[49] private __GAP;\\n\\n    // ============ Initializer ============\\n\\n    function __QueueManager_initialize() internal initializer {\\n        queue.initialize();\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Returns number of elements in queue\\n     */\\n    function queueLength() external view returns (uint256) {\\n        return queue.length();\\n    }\\n\\n    /**\\n     * @notice Returns TRUE iff `_item` is in the queue\\n     */\\n    function queueContains(bytes32 _item) external view returns (bool) {\\n        return queue.contains(_item);\\n    }\\n\\n    /**\\n     * @notice Returns last item enqueued to the queue\\n     */\\n    function queueEnd() external view returns (bytes32) {\\n        return queue.lastItem();\\n    }\\n}\\n\",\"keccak256\":\"0x2eb9e9182ac66b4f7b6e27772b4e11a04637c96f5774cd7b69cea6dd3f8cf683\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/Replica.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {Version0} from \\\"./Version0.sol\\\";\\nimport {NomadBase} from \\\"./NomadBase.sol\\\";\\nimport {MerkleLib} from \\\"./libs/Merkle.sol\\\";\\nimport {Message} from \\\"./libs/Message.sol\\\";\\nimport {IMessageRecipient} from \\\"./interfaces/IMessageRecipient.sol\\\";\\n// ============ External Imports ============\\nimport {TypedMemView} from \\\"../../summa/TypedMemView.sol\\\";\\n\\n/**\\n * @title Replica\\n * @author Illusory Systems Inc.\\n * @notice Track root updates on Home,\\n * prove and dispatch messages to end recipients.\\n */\\ncontract Replica is Version0, NomadBase {\\n    // ============ Libraries ============\\n\\n    using MerkleLib for MerkleLib.Tree;\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using Message for bytes29;\\n\\n    // ============ Constants ============\\n\\n    bytes32 public constant LEGACY_STATUS_NONE = bytes32(0);\\n    bytes32 public constant LEGACY_STATUS_PROVEN = bytes32(uint256(1));\\n    bytes32 public constant LEGACY_STATUS_PROCESSED = bytes32(uint256(2));\\n\\n    // ============ Public Storage ============\\n\\n    // Domain of home chain\\n    uint32 public remoteDomain;\\n    // Number of seconds to wait before root becomes confirmable\\n    uint256 public optimisticSeconds;\\n    // re-entrancy guard\\n    uint8 private entered;\\n    // Mapping of roots to allowable confirmation times\\n    mapping(bytes32 => uint256) public confirmAt;\\n    // Mapping of message leaves to MessageStatus\\n    mapping(bytes32 => bytes32) public messages;\\n\\n    // ============ Upgrade Gap ============\\n\\n    // gap for upgrade safety\\n    uint256[45] private __GAP;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when message is processed\\n     * @param messageHash The keccak256 hash of the message that was processed\\n     * @param success TRUE if the call was executed successfully,\\n     * FALSE if the call reverted or threw\\n     * @param returnData the return data from the external call\\n     */\\n    event Process(\\n        bytes32 indexed messageHash,\\n        bool indexed success,\\n        bytes indexed returnData\\n    );\\n\\n    /**\\n     * @notice Emitted when the value for optimisticTimeout is set\\n     * @param timeout The new value for optimistic timeout\\n     */\\n    event SetOptimisticTimeout(uint256 timeout);\\n\\n    /**\\n     * @notice Emitted when a root's confirmation is modified by governance\\n     * @param root The root for which confirmAt has been set\\n     * @param previousConfirmAt The previous value of confirmAt\\n     * @param newConfirmAt The new value of confirmAt\\n     */\\n    event SetConfirmation(\\n        bytes32 indexed root,\\n        uint256 previousConfirmAt,\\n        uint256 newConfirmAt\\n    );\\n\\n    // ============ Constructor ============\\n\\n    constructor(uint32 _localDomain) NomadBase(_localDomain) {}\\n\\n    // ============ Initializer ============\\n\\n    /**\\n     * @notice Initialize the replica\\n     * @dev Performs the following action:\\n     *      - initializes inherited contracts\\n     *      - initializes re-entrancy guard\\n     *      - sets remote domain\\n     *      - sets a trusted root, and pre-approves messages under it\\n     *      - sets the optimistic timer\\n     * @param _remoteDomain The domain of the Home contract this follows\\n     * @param _updater The EVM id of the updater\\n     * @param _committedRoot A trusted root from which to start the Replica\\n     * @param _optimisticSeconds The time a new root must wait to be confirmed\\n     */\\n    function initialize(\\n        uint32 _remoteDomain,\\n        address _updater,\\n        bytes32 _committedRoot,\\n        uint256 _optimisticSeconds\\n    ) public initializer {\\n        __NomadBase_initialize(_updater);\\n        // set storage variables\\n        entered = 1;\\n        remoteDomain = _remoteDomain;\\n        committedRoot = _committedRoot;\\n        // pre-approve the committed root.\\n        if (_committedRoot != bytes32(0)) confirmAt[_committedRoot] = 1;\\n        _setOptimisticTimeout(_optimisticSeconds);\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @notice Called by external agent. Submits the signed update's new root,\\n     * marks root's allowable confirmation time, and emits an `Update` event.\\n     * @dev Reverts if update doesn't build off latest committedRoot\\n     * or if signature is invalid.\\n     * @param _oldRoot Old merkle root\\n     * @param _newRoot New merkle root\\n     * @param _signature Updater's signature on `_oldRoot` and `_newRoot`\\n     */\\n    function update(\\n        bytes32 _oldRoot,\\n        bytes32 _newRoot,\\n        bytes memory _signature\\n    ) external {\\n        // ensure that update is building off the last submitted root\\n        require(_oldRoot == committedRoot, \\\"not current update\\\");\\n        // validate updater signature\\n        require(\\n            _isUpdaterSignature(_oldRoot, _newRoot, _signature),\\n            \\\"!updater sig\\\"\\n        );\\n        // Hook for future use\\n        _beforeUpdate();\\n        // set the new root's confirmation timer\\n        confirmAt[_newRoot] = block.timestamp + optimisticSeconds;\\n        // update committedRoot\\n        committedRoot = _newRoot;\\n        emit Update(remoteDomain, _oldRoot, _newRoot, _signature);\\n    }\\n\\n    /**\\n     * @notice If necessary, attempts to prove the validity of provided\\n     *         `_message`. If the message is successfully proven, then tries to\\n     *         process the message\\n     * @dev Reverts if `prove` call returns false\\n     * @param _message A Nomad message coming from another chain :)\\n     * @param _proof Merkle proof of inclusion for message's leaf (optional if\\n     *        the message has already been proven).\\n     * @param _index Index of leaf in home's merkle tree (optional if the\\n     *        message has already been proven).\\n     */\\n    function proveAndProcess(\\n        bytes memory _message,\\n        bytes32[32] calldata _proof,\\n        uint256 _index\\n    ) external {\\n        bytes32 _messageHash = keccak256(_message);\\n        require(\\n            acceptableRoot(messages[_messageHash]) ||\\n                prove(_messageHash, _proof, _index),\\n            \\\"!prove\\\"\\n        );\\n        process(_message);\\n    }\\n\\n    /**\\n     * @notice Given formatted message, attempts to dispatch\\n     * message payload to end recipient.\\n     * @dev Recipient must implement a `handle` method (refer to IMessageRecipient.sol)\\n     * Reverts if formatted message's destination domain is not the Replica's domain,\\n     * if message has not been proven,\\n     * or if not enough gas is provided for the dispatch transaction.\\n     * @param _message Formatted message\\n     * @return _success TRUE iff dispatch transaction succeeded\\n     */\\n    function process(bytes memory _message) public returns (bool _success) {\\n        // ensure message was meant for this domain\\n        bytes29 _m = _message.ref(0);\\n        require(_m.destination() == localDomain, \\\"!destination\\\");\\n        // ensure message has been proven\\n        bytes32 _messageHash = _m.keccak();\\n        require(acceptableRoot(messages[_messageHash]), \\\"!proven\\\");\\n        // check re-entrancy guard\\n        require(entered == 1, \\\"!reentrant\\\");\\n        entered = 0;\\n        // update message status as processed\\n        messages[_messageHash] = LEGACY_STATUS_PROCESSED;\\n        // call handle function\\n        IMessageRecipient(_m.recipientAddress()).handle(\\n            _m.origin(),\\n            _m.nonce(),\\n            _m.sender(),\\n            _m.body().clone()\\n        );\\n        // emit process results\\n        emit Process(_messageHash, true, \\\"\\\");\\n        // reset re-entrancy guard\\n        entered = 1;\\n        // return true\\n        return true;\\n    }\\n\\n    // ============ External Owner Functions ============\\n\\n    /**\\n     * @notice Set optimistic timeout period for new roots\\n     * @dev Only callable by owner (Governance)\\n     * @param _optimisticSeconds New optimistic timeout period\\n     */\\n    function setOptimisticTimeout(uint256 _optimisticSeconds)\\n        external\\n        onlyOwner\\n    {\\n        _setOptimisticTimeout(_optimisticSeconds);\\n    }\\n\\n    /**\\n     * @notice Set Updater role\\n     * @dev MUST ensure that all roots signed by previous Updater have\\n     * been relayed before calling. Only callable by owner (Governance)\\n     * @param _updater New Updater\\n     */\\n    function setUpdater(address _updater) external onlyOwner {\\n        _setUpdater(_updater);\\n    }\\n\\n    /**\\n     * @notice Set confirmAt for a given root\\n     * @dev To be used if in the case that fraud is proven\\n     * and roots need to be deleted / added. Only callable by owner (Governance)\\n     * @param _root The root for which to modify confirm time\\n     * @param _confirmAt The new confirmation time. Set to 0 to \\\"delete\\\" a root.\\n     */\\n    function setConfirmation(bytes32 _root, uint256 _confirmAt)\\n        external\\n        onlyOwner\\n    {\\n        uint256 _previousConfirmAt = confirmAt[_root];\\n        confirmAt[_root] = _confirmAt;\\n        emit SetConfirmation(_root, _previousConfirmAt, _confirmAt);\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Check that the root has been submitted\\n     * and that the optimistic timeout period has expired,\\n     * meaning the root can be processed\\n     * @param _root the Merkle root, submitted in an update, to check\\n     * @return TRUE iff root has been submitted & timeout has expired\\n     */\\n    function acceptableRoot(bytes32 _root) public view returns (bool) {\\n        // this is backwards-compatibility for messages proven/processed\\n        // under previous versions\\n        if (_root == LEGACY_STATUS_PROVEN) return true;\\n        if (_root == LEGACY_STATUS_PROCESSED || _root == LEGACY_STATUS_NONE)\\n            return false;\\n\\n        uint256 _time = confirmAt[_root];\\n        if (_time == 0) {\\n            return false;\\n        }\\n        return block.timestamp >= _time;\\n    }\\n\\n    /**\\n     * @notice Attempts to prove the validity of message given its leaf, the\\n     * merkle proof of inclusion for the leaf, and the index of the leaf.\\n     * @dev Reverts if message's MessageStatus != None (i.e. if message was\\n     * already proven or processed)\\n     * @dev For convenience, we allow proving against any previous root.\\n     * This means that witnesses never need to be updated for the new root\\n     * @param _leaf Leaf of message to prove\\n     * @param _proof Merkle proof of inclusion for leaf\\n     * @param _index Index of leaf in home's merkle tree\\n     * @return Returns true if proof was valid and `prove` call succeeded\\n     **/\\n    function prove(\\n        bytes32 _leaf,\\n        bytes32[32] calldata _proof,\\n        uint256 _index\\n    ) public returns (bool) {\\n        // ensure that message has not been processed\\n        // Note that this allows re-proving under a new root.\\n        require(\\n            messages[_leaf] != LEGACY_STATUS_PROCESSED,\\n            \\\"already processed\\\"\\n        );\\n        // calculate the expected root based on the proof\\n        bytes32 _calculatedRoot = MerkleLib.branchRoot(_leaf, _proof, _index);\\n        // if the root is valid, change status to Proven\\n        if (acceptableRoot(_calculatedRoot)) {\\n            messages[_leaf] = _calculatedRoot;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Hash of Home domain concatenated with \\\"NOMAD\\\"\\n     */\\n    function homeDomainHash() public view override returns (bytes32) {\\n        return _homeDomainHash(remoteDomain);\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Set optimistic timeout period for new roots\\n     * @dev Called by owner (Governance) or at initialization\\n     * @param _optimisticSeconds New optimistic timeout period\\n     */\\n    function _setOptimisticTimeout(uint256 _optimisticSeconds) internal {\\n        // This allows us to initialize the value to be very low in test envs,\\n        // but does not allow governance action to lower a production env below\\n        // the safe value\\n        uint256 _current = optimisticSeconds;\\n        if (_current != 0 && _current > 1500)\\n            require(_optimisticSeconds >= 1500, \\\"optimistic timeout too low\\\");\\n        // ensure the optimistic timeout is less than 1 year\\n        // (prevents overflow when adding block.timestamp)\\n        require(_optimisticSeconds < 31536000, \\\"optimistic timeout too high\\\");\\n        // set the optimistic timeout\\n        optimisticSeconds = _optimisticSeconds;\\n        emit SetOptimisticTimeout(_optimisticSeconds);\\n    }\\n\\n    /// @notice Hook for potential future use\\n    // solhint-disable-next-line no-empty-blocks\\n    function _beforeUpdate() internal {}\\n}\\n\",\"keccak256\":\"0xb5f4f51ba51e4c4d8047ec70e1453e283ac7a21cd45bec355447c6d79475fa5a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\nabstract contract Version0 {\\n    uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x618aafe9b18ba0a96bb6654baa64f115a46cb795bb531f49d0567a68254a4d1c\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/XAppConnectionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {Home} from \\\"./Home.sol\\\";\\nimport {Replica} from \\\"./Replica.sol\\\";\\nimport {TypeCasts} from \\\"./libs/TypeCasts.sol\\\";\\n// ============ External Imports ============\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title XAppConnectionManager\\n * @author Illusory Systems Inc.\\n * @notice Manages a registry of local Replica contracts\\n * for remote Home domains. Accepts Watcher signatures\\n * to un-enroll Replicas attached to fraudulent remote Homes\\n */\\ncontract XAppConnectionManager is Ownable {\\n    // ============ Public Storage ============\\n\\n    // Home contract\\n    Home public home;\\n    // local Replica address => remote Home domain\\n    mapping(address => uint32) public replicaToDomain;\\n    // remote Home domain => local Replica address\\n    mapping(uint32 => address) public domainToReplica;\\n    // watcher address => replica remote domain => has/doesn't have permission\\n    mapping(address => mapping(uint32 => bool)) private watcherPermissions;\\n\\n    // ============ Events ============\\n\\n    /**\\n     * @notice Emitted when a new Replica is enrolled / added\\n     * @param domain the remote domain of the Home contract for the Replica\\n     * @param replica the address of the Replica\\n     */\\n    event ReplicaEnrolled(uint32 indexed domain, address replica);\\n\\n    /**\\n     * @notice Emitted when a new Replica is un-enrolled / removed\\n     * @param domain the remote domain of the Home contract for the Replica\\n     * @param replica the address of the Replica\\n     */\\n    event ReplicaUnenrolled(uint32 indexed domain, address replica);\\n\\n    /**\\n     * @notice Emitted when Watcher permissions are changed\\n     * @param domain the remote domain of the Home contract for the Replica\\n     * @param watcher the address of the Watcher\\n     * @param access TRUE if the Watcher was given permissions, FALSE if permissions were removed\\n     */\\n    event WatcherPermissionSet(\\n        uint32 indexed domain,\\n        address watcher,\\n        bool access\\n    );\\n\\n    // ============ Constructor ============\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor() Ownable() {}\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @notice Un-Enroll a replica contract\\n     * in the case that fraud was detected on the Home\\n     * @dev in the future, if fraud occurs on the Home contract,\\n     * the Watcher will submit their signature directly to the Home\\n     * and it can be relayed to all remote chains to un-enroll the Replicas\\n     * @param _domain the remote domain of the Home contract for the Replica\\n     * @param _updater the address of the Updater for the Home contract (also stored on Replica)\\n     * @param _signature signature of watcher on (domain, replica address, updater address)\\n     */\\n    function unenrollReplica(\\n        uint32 _domain,\\n        bytes32 _updater,\\n        bytes memory _signature\\n    ) external {\\n        // ensure that the replica is currently set\\n        address _replica = domainToReplica[_domain];\\n        require(_replica != address(0), \\\"!replica exists\\\");\\n        // ensure that the signature is on the proper updater\\n        require(\\n            Replica(_replica).updater() == TypeCasts.bytes32ToAddress(_updater),\\n            \\\"!current updater\\\"\\n        );\\n        // get the watcher address from the signature\\n        // and ensure that the watcher has permission to un-enroll this replica\\n        address _watcher = _recoverWatcherFromSig(\\n            _domain,\\n            TypeCasts.addressToBytes32(_replica),\\n            _updater,\\n            _signature\\n        );\\n        require(watcherPermissions[_watcher][_domain], \\\"!valid watcher\\\");\\n        // remove the replica from mappings\\n        _unenrollReplica(_replica);\\n    }\\n\\n    /**\\n     * @notice Set the address of the local Home contract\\n     * @param _home the address of the local Home contract\\n     */\\n    function setHome(address _home) external onlyOwner {\\n        home = Home(_home);\\n    }\\n\\n    /**\\n     * @notice Allow Owner to enroll Replica contract\\n     * @param _replica the address of the Replica\\n     * @param _domain the remote domain of the Home contract for the Replica\\n     */\\n    function ownerEnrollReplica(address _replica, uint32 _domain)\\n        external\\n        onlyOwner\\n    {\\n        // un-enroll any existing replica\\n        _unenrollReplica(_replica);\\n        // add replica and domain to two-way mapping\\n        replicaToDomain[_replica] = _domain;\\n        domainToReplica[_domain] = _replica;\\n        emit ReplicaEnrolled(_domain, _replica);\\n    }\\n\\n    /**\\n     * @notice Allow Owner to un-enroll Replica contract\\n     * @param _replica the address of the Replica\\n     */\\n    function ownerUnenrollReplica(address _replica) external onlyOwner {\\n        _unenrollReplica(_replica);\\n    }\\n\\n    /**\\n     * @notice Allow Owner to set Watcher permissions for a Replica\\n     * @param _watcher the address of the Watcher\\n     * @param _domain the remote domain of the Home contract for the Replica\\n     * @param _access TRUE to give the Watcher permissions, FALSE to remove permissions\\n     */\\n    function setWatcherPermission(\\n        address _watcher,\\n        uint32 _domain,\\n        bool _access\\n    ) external onlyOwner {\\n        watcherPermissions[_watcher][_domain] = _access;\\n        emit WatcherPermissionSet(_domain, _watcher, _access);\\n    }\\n\\n    /**\\n     * @notice Query local domain from Home\\n     * @return local domain\\n     */\\n    function localDomain() external view returns (uint32) {\\n        return home.localDomain();\\n    }\\n\\n    /**\\n     * @notice Get access permissions for the watcher on the domain\\n     * @param _watcher the address of the watcher\\n     * @param _domain the domain to check for watcher permissions\\n     * @return TRUE iff _watcher has permission to un-enroll replicas on _domain\\n     */\\n    function watcherPermission(address _watcher, uint32 _domain)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return watcherPermissions[_watcher][_domain];\\n    }\\n\\n    // ============ Public Functions ============\\n\\n    /**\\n     * @notice Check whether _replica is enrolled\\n     * @param _replica the replica to check for enrollment\\n     * @return TRUE iff _replica is enrolled\\n     */\\n    function isReplica(address _replica) public view returns (bool) {\\n        return replicaToDomain[_replica] != 0;\\n    }\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Remove the replica from the two-way mappings\\n     * @param _replica replica to un-enroll\\n     */\\n    function _unenrollReplica(address _replica) internal {\\n        uint32 _currentDomain = replicaToDomain[_replica];\\n        domainToReplica[_currentDomain] = address(0);\\n        replicaToDomain[_replica] = 0;\\n        emit ReplicaUnenrolled(_currentDomain, _replica);\\n    }\\n\\n    /**\\n     * @notice Get the Watcher address from the provided signature\\n     * @return address of watcher that signed\\n     */\\n    function _recoverWatcherFromSig(\\n        uint32 _domain,\\n        bytes32 _replica,\\n        bytes32 _updater,\\n        bytes memory _signature\\n    ) internal view returns (address) {\\n        bytes32 _homeDomainHash = Replica(TypeCasts.bytes32ToAddress(_replica))\\n            .homeDomainHash();\\n        bytes32 _digest = keccak256(\\n            abi.encodePacked(_homeDomainHash, _domain, _updater)\\n        );\\n        _digest = ECDSA.toEthSignedMessageHash(_digest);\\n        return ECDSA.recover(_digest, _signature);\\n    }\\n\\n    /**\\n     * @dev should be impossible to renounce ownership;\\n     * we override OpenZeppelin Ownable implementation\\n     * of renounceOwnership to make it a no-op\\n     */\\n    function renounceOwnership() public override onlyOwner {\\n        // do nothing\\n    }\\n}\\n\",\"keccak256\":\"0x630cdea5362ca243850eb692246e72f663152ffc1f8b6dea8c158bf1caddf5a2\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/interfaces/IMessageRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IMessageRecipient {\\n    function handle(\\n        uint32 _origin,\\n        uint32 _nonce,\\n        bytes32 _sender,\\n        bytes memory _message\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc403cb0e81059fc5076f3fa2dc1250e914a11463bee3228f9e75b45a67b70690\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/interfaces/IUpdaterManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\ninterface IUpdaterManager {\\n    function slashUpdater(address payable _reporter) external;\\n\\n    function updater() external view returns (address);\\n}\\n\",\"keccak256\":\"0x683bbf781a754bb36fb3bcb6a7c00a4297315b043985835c2be9790c4c30d56b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/libs/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// work based on eth2 deposit contract, which is used under CC0-1.0\\n\\n/**\\n * @title MerkleLib\\n * @author Illusory Systems Inc.\\n * @notice An incremental merkle tree modeled on the eth2 deposit contract.\\n **/\\nlibrary MerkleLib {\\n    uint256 internal constant TREE_DEPTH = 32;\\n    uint256 internal constant MAX_LEAVES = 2**TREE_DEPTH - 1;\\n\\n    /**\\n     * @notice Struct representing incremental merkle tree. Contains current\\n     * branch and the number of inserted leaves in the tree.\\n     **/\\n    struct Tree {\\n        bytes32[TREE_DEPTH] branch;\\n        uint256 count;\\n    }\\n\\n    /**\\n     * @notice Inserts `_node` into merkle tree\\n     * @dev Reverts if tree is full\\n     * @param _node Element to insert into tree\\n     **/\\n    function insert(Tree storage _tree, bytes32 _node) internal {\\n        require(_tree.count < MAX_LEAVES, \\\"merkle tree full\\\");\\n\\n        _tree.count += 1;\\n        uint256 size = _tree.count;\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n            if ((size & 1) == 1) {\\n                _tree.branch[i] = _node;\\n                return;\\n            }\\n            _node = keccak256(abi.encodePacked(_tree.branch[i], _node));\\n            size /= 2;\\n        }\\n        // As the loop should always end prematurely with the `return` statement,\\n        // this code should be unreachable. We assert `false` just to be safe.\\n        assert(false);\\n    }\\n\\n    /**\\n     * @notice Calculates and returns`_tree`'s current root given array of zero\\n     * hashes\\n     * @param _zeroes Array of zero hashes\\n     * @return _current Calculated root of `_tree`\\n     **/\\n    function rootWithCtx(Tree storage _tree, bytes32[TREE_DEPTH] memory _zeroes)\\n        internal\\n        view\\n        returns (bytes32 _current)\\n    {\\n        uint256 _index = _tree.count;\\n\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n            uint256 _ithBit = (_index >> i) & 0x01;\\n            bytes32 _next = _tree.branch[i];\\n            if (_ithBit == 1) {\\n                _current = keccak256(abi.encodePacked(_next, _current));\\n            } else {\\n                _current = keccak256(abi.encodePacked(_current, _zeroes[i]));\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates and returns`_tree`'s current root\\n    function root(Tree storage _tree) internal view returns (bytes32) {\\n        return rootWithCtx(_tree, zeroHashes());\\n    }\\n\\n    /// @notice Returns array of TREE_DEPTH zero hashes\\n    /// @return _zeroes Array of TREE_DEPTH zero hashes\\n    function zeroHashes()\\n        internal\\n        pure\\n        returns (bytes32[TREE_DEPTH] memory _zeroes)\\n    {\\n        _zeroes[0] = Z_0;\\n        _zeroes[1] = Z_1;\\n        _zeroes[2] = Z_2;\\n        _zeroes[3] = Z_3;\\n        _zeroes[4] = Z_4;\\n        _zeroes[5] = Z_5;\\n        _zeroes[6] = Z_6;\\n        _zeroes[7] = Z_7;\\n        _zeroes[8] = Z_8;\\n        _zeroes[9] = Z_9;\\n        _zeroes[10] = Z_10;\\n        _zeroes[11] = Z_11;\\n        _zeroes[12] = Z_12;\\n        _zeroes[13] = Z_13;\\n        _zeroes[14] = Z_14;\\n        _zeroes[15] = Z_15;\\n        _zeroes[16] = Z_16;\\n        _zeroes[17] = Z_17;\\n        _zeroes[18] = Z_18;\\n        _zeroes[19] = Z_19;\\n        _zeroes[20] = Z_20;\\n        _zeroes[21] = Z_21;\\n        _zeroes[22] = Z_22;\\n        _zeroes[23] = Z_23;\\n        _zeroes[24] = Z_24;\\n        _zeroes[25] = Z_25;\\n        _zeroes[26] = Z_26;\\n        _zeroes[27] = Z_27;\\n        _zeroes[28] = Z_28;\\n        _zeroes[29] = Z_29;\\n        _zeroes[30] = Z_30;\\n        _zeroes[31] = Z_31;\\n    }\\n\\n    /**\\n     * @notice Calculates and returns the merkle root for the given leaf\\n     * `_item`, a merkle branch, and the index of `_item` in the tree.\\n     * @param _item Merkle leaf\\n     * @param _branch Merkle proof\\n     * @param _index Index of `_item` in tree\\n     * @return _current Calculated merkle root\\n     **/\\n    function branchRoot(\\n        bytes32 _item,\\n        bytes32[TREE_DEPTH] memory _branch,\\n        uint256 _index\\n    ) internal pure returns (bytes32 _current) {\\n        _current = _item;\\n\\n        for (uint256 i = 0; i < TREE_DEPTH; i++) {\\n            uint256 _ithBit = (_index >> i) & 0x01;\\n            bytes32 _next = _branch[i];\\n            if (_ithBit == 1) {\\n                _current = keccak256(abi.encodePacked(_next, _current));\\n            } else {\\n                _current = keccak256(abi.encodePacked(_current, _next));\\n            }\\n        }\\n    }\\n\\n    // keccak256 zero hashes\\n    bytes32 internal constant Z_0 =\\n        hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\";\\n    bytes32 internal constant Z_1 =\\n        hex\\\"ad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5\\\";\\n    bytes32 internal constant Z_2 =\\n        hex\\\"b4c11951957c6f8f642c4af61cd6b24640fec6dc7fc607ee8206a99e92410d30\\\";\\n    bytes32 internal constant Z_3 =\\n        hex\\\"21ddb9a356815c3fac1026b6dec5df3124afbadb485c9ba5a3e3398a04b7ba85\\\";\\n    bytes32 internal constant Z_4 =\\n        hex\\\"e58769b32a1beaf1ea27375a44095a0d1fb664ce2dd358e7fcbfb78c26a19344\\\";\\n    bytes32 internal constant Z_5 =\\n        hex\\\"0eb01ebfc9ed27500cd4dfc979272d1f0913cc9f66540d7e8005811109e1cf2d\\\";\\n    bytes32 internal constant Z_6 =\\n        hex\\\"887c22bd8750d34016ac3c66b5ff102dacdd73f6b014e710b51e8022af9a1968\\\";\\n    bytes32 internal constant Z_7 =\\n        hex\\\"ffd70157e48063fc33c97a050f7f640233bf646cc98d9524c6b92bcf3ab56f83\\\";\\n    bytes32 internal constant Z_8 =\\n        hex\\\"9867cc5f7f196b93bae1e27e6320742445d290f2263827498b54fec539f756af\\\";\\n    bytes32 internal constant Z_9 =\\n        hex\\\"cefad4e508c098b9a7e1d8feb19955fb02ba9675585078710969d3440f5054e0\\\";\\n    bytes32 internal constant Z_10 =\\n        hex\\\"f9dc3e7fe016e050eff260334f18a5d4fe391d82092319f5964f2e2eb7c1c3a5\\\";\\n    bytes32 internal constant Z_11 =\\n        hex\\\"f8b13a49e282f609c317a833fb8d976d11517c571d1221a265d25af778ecf892\\\";\\n    bytes32 internal constant Z_12 =\\n        hex\\\"3490c6ceeb450aecdc82e28293031d10c7d73bf85e57bf041a97360aa2c5d99c\\\";\\n    bytes32 internal constant Z_13 =\\n        hex\\\"c1df82d9c4b87413eae2ef048f94b4d3554cea73d92b0f7af96e0271c691e2bb\\\";\\n    bytes32 internal constant Z_14 =\\n        hex\\\"5c67add7c6caf302256adedf7ab114da0acfe870d449a3a489f781d659e8becc\\\";\\n    bytes32 internal constant Z_15 =\\n        hex\\\"da7bce9f4e8618b6bd2f4132ce798cdc7a60e7e1460a7299e3c6342a579626d2\\\";\\n    bytes32 internal constant Z_16 =\\n        hex\\\"2733e50f526ec2fa19a22b31e8ed50f23cd1fdf94c9154ed3a7609a2f1ff981f\\\";\\n    bytes32 internal constant Z_17 =\\n        hex\\\"e1d3b5c807b281e4683cc6d6315cf95b9ade8641defcb32372f1c126e398ef7a\\\";\\n    bytes32 internal constant Z_18 =\\n        hex\\\"5a2dce0a8a7f68bb74560f8f71837c2c2ebbcbf7fffb42ae1896f13f7c7479a0\\\";\\n    bytes32 internal constant Z_19 =\\n        hex\\\"b46a28b6f55540f89444f63de0378e3d121be09e06cc9ded1c20e65876d36aa0\\\";\\n    bytes32 internal constant Z_20 =\\n        hex\\\"c65e9645644786b620e2dd2ad648ddfcbf4a7e5b1a3a4ecfe7f64667a3f0b7e2\\\";\\n    bytes32 internal constant Z_21 =\\n        hex\\\"f4418588ed35a2458cffeb39b93d26f18d2ab13bdce6aee58e7b99359ec2dfd9\\\";\\n    bytes32 internal constant Z_22 =\\n        hex\\\"5a9c16dc00d6ef18b7933a6f8dc65ccb55667138776f7dea101070dc8796e377\\\";\\n    bytes32 internal constant Z_23 =\\n        hex\\\"4df84f40ae0c8229d0d6069e5c8f39a7c299677a09d367fc7b05e3bc380ee652\\\";\\n    bytes32 internal constant Z_24 =\\n        hex\\\"cdc72595f74c7b1043d0e1ffbab734648c838dfb0527d971b602bc216c9619ef\\\";\\n    bytes32 internal constant Z_25 =\\n        hex\\\"0abf5ac974a1ed57f4050aa510dd9c74f508277b39d7973bb2dfccc5eeb0618d\\\";\\n    bytes32 internal constant Z_26 =\\n        hex\\\"b8cd74046ff337f0a7bf2c8e03e10f642c1886798d71806ab1e888d9e5ee87d0\\\";\\n    bytes32 internal constant Z_27 =\\n        hex\\\"838c5655cb21c6cb83313b5a631175dff4963772cce9108188b34ac87c81c41e\\\";\\n    bytes32 internal constant Z_28 =\\n        hex\\\"662ee4dd2dd7b2bc707961b1e646c4047669dcb6584f0d8d770daf5d7e7deb2e\\\";\\n    bytes32 internal constant Z_29 =\\n        hex\\\"388ab20e2573d171a88108e79d820e98f26c0b84aa8b2f4aa4968dbb818ea322\\\";\\n    bytes32 internal constant Z_30 =\\n        hex\\\"93237c50ba75ee485f4c22adf2f741400bdf8d6a9cc7df7ecae576221665d735\\\";\\n    bytes32 internal constant Z_31 =\\n        hex\\\"8448818bb4ae4562849e949e17ac16e0be16688e156b5cf15e098c627c0056a9\\\";\\n}\\n\",\"keccak256\":\"0x9e679a1085e01d343a043d7bf873e9c7b193b3f840207a135c7f43e0802d5e4a\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/libs/Message.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../summa/TypedMemView.sol\\\";\\n\\nimport {TypeCasts} from \\\"./TypeCasts.sol\\\";\\n\\n/**\\n * @title Message Library\\n * @author Illusory Systems Inc.\\n * @notice Library for formatted messages used by Home and Replica.\\n **/\\nlibrary Message {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // Number of bytes in formatted message before `body` field\\n    uint256 internal constant PREFIX_LENGTH = 76;\\n\\n    /**\\n     * @notice Returns formatted (packed) message with provided fields\\n     * @param _originDomain Domain of home chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _nonce Destination-specific nonce\\n     * @param _destinationDomain Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _messageBody Raw bytes of message body\\n     * @return Formatted message\\n     **/\\n    function formatMessage(\\n        uint32 _originDomain,\\n        bytes32 _sender,\\n        uint32 _nonce,\\n        uint32 _destinationDomain,\\n        bytes32 _recipient,\\n        bytes memory _messageBody\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodePacked(\\n                _originDomain,\\n                _sender,\\n                _nonce,\\n                _destinationDomain,\\n                _recipient,\\n                _messageBody\\n            );\\n    }\\n\\n    /**\\n     * @notice Returns leaf of formatted message with provided fields.\\n     * @param _origin Domain of home chain\\n     * @param _sender Address of sender as bytes32\\n     * @param _nonce Destination-specific nonce number\\n     * @param _destination Domain of destination chain\\n     * @param _recipient Address of recipient on destination chain as bytes32\\n     * @param _body Raw bytes of message body\\n     * @return Leaf (hash) of formatted message\\n     **/\\n    function messageHash(\\n        uint32 _origin,\\n        bytes32 _sender,\\n        uint32 _nonce,\\n        uint32 _destination,\\n        bytes32 _recipient,\\n        bytes memory _body\\n    ) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                formatMessage(\\n                    _origin,\\n                    _sender,\\n                    _nonce,\\n                    _destination,\\n                    _recipient,\\n                    _body\\n                )\\n            );\\n    }\\n\\n    /// @notice Returns message's origin field\\n    function origin(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(0, 4));\\n    }\\n\\n    /// @notice Returns message's sender field\\n    function sender(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(4, 32);\\n    }\\n\\n    /// @notice Returns message's nonce field\\n    function nonce(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(36, 4));\\n    }\\n\\n    /// @notice Returns message's destination field\\n    function destination(bytes29 _message) internal pure returns (uint32) {\\n        return uint32(_message.indexUint(40, 4));\\n    }\\n\\n    /// @notice Returns message's recipient field as bytes32\\n    function recipient(bytes29 _message) internal pure returns (bytes32) {\\n        return _message.index(44, 32);\\n    }\\n\\n    /// @notice Returns message's recipient field as an address\\n    function recipientAddress(bytes29 _message)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return TypeCasts.bytes32ToAddress(recipient(_message));\\n    }\\n\\n    /// @notice Returns message's body field as bytes29 (refer to TypedMemView library for details on bytes29 type)\\n    function body(bytes29 _message) internal pure returns (bytes29) {\\n        return _message.slice(PREFIX_LENGTH, _message.len() - PREFIX_LENGTH, 0);\\n    }\\n\\n    function leaf(bytes29 _message) internal view returns (bytes32) {\\n        return\\n            messageHash(\\n                origin(_message),\\n                sender(_message),\\n                nonce(_message),\\n                destination(_message),\\n                recipient(_message),\\n                TypedMemView.clone(body(_message))\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xd0b3a78a104ada41eddbfc316c8922b68d6b8a2bbb5d234d0c4d2bd1a397d6cd\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/libs/Queue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n/**\\n * @title QueueLib\\n * @author Illusory Systems Inc.\\n * @notice Library containing queue struct and operations for queue used by\\n * Home and Replica.\\n **/\\nlibrary QueueLib {\\n    /**\\n     * @notice Queue struct\\n     * @dev Internally keeps track of the `first` and `last` elements through\\n     * indices and a mapping of indices to enqueued elements.\\n     **/\\n    struct Queue {\\n        uint128 first;\\n        uint128 last;\\n        mapping(uint256 => bytes32) queue;\\n    }\\n\\n    /**\\n     * @notice Initializes the queue\\n     * @dev Empty state denoted by _q.first > q._last. Queue initialized\\n     * with _q.first = 1 and _q.last = 0.\\n     **/\\n    function initialize(Queue storage _q) internal {\\n        if (_q.first == 0) {\\n            _q.first = 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Enqueues a single new element\\n     * @param _item New element to be enqueued\\n     * @return _last Index of newly enqueued element\\n     **/\\n    function enqueue(Queue storage _q, bytes32 _item)\\n        internal\\n        returns (uint128 _last)\\n    {\\n        _last = _q.last + 1;\\n        _q.last = _last;\\n        if (_item != bytes32(0)) {\\n            // saves gas if we're queueing 0\\n            _q.queue[_last] = _item;\\n        }\\n    }\\n\\n    /**\\n     * @notice Dequeues element at front of queue\\n     * @dev Removes dequeued element from storage\\n     * @return _item Dequeued element\\n     **/\\n    function dequeue(Queue storage _q) internal returns (bytes32 _item) {\\n        uint128 _last = _q.last;\\n        uint128 _first = _q.first;\\n        require(_length(_last, _first) != 0, \\\"Empty\\\");\\n        _item = _q.queue[_first];\\n        if (_item != bytes32(0)) {\\n            // saves gas if we're dequeuing 0\\n            delete _q.queue[_first];\\n        }\\n        _q.first = _first + 1;\\n    }\\n\\n    /**\\n     * @notice Batch enqueues several elements\\n     * @param _items Array of elements to be enqueued\\n     * @return _last Index of last enqueued element\\n     **/\\n    function enqueue(Queue storage _q, bytes32[] memory _items)\\n        internal\\n        returns (uint128 _last)\\n    {\\n        _last = _q.last;\\n        for (uint256 i = 0; i < _items.length; i += 1) {\\n            _last += 1;\\n            bytes32 _item = _items[i];\\n            if (_item != bytes32(0)) {\\n                _q.queue[_last] = _item;\\n            }\\n        }\\n        _q.last = _last;\\n    }\\n\\n    /**\\n     * @notice Batch dequeues `_number` elements\\n     * @dev Reverts if `_number` > queue length\\n     * @param _number Number of elements to dequeue\\n     * @return Array of dequeued elements\\n     **/\\n    function dequeue(Queue storage _q, uint256 _number)\\n        internal\\n        returns (bytes32[] memory)\\n    {\\n        uint128 _last = _q.last;\\n        uint128 _first = _q.first;\\n        // Cannot underflow unless state is corrupted\\n        require(_length(_last, _first) >= _number, \\\"Insufficient\\\");\\n\\n        bytes32[] memory _items = new bytes32[](_number);\\n\\n        for (uint256 i = 0; i < _number; i++) {\\n            _items[i] = _q.queue[_first];\\n            delete _q.queue[_first];\\n            _first++;\\n        }\\n        _q.first = _first;\\n        return _items;\\n    }\\n\\n    /**\\n     * @notice Returns true if `_item` is in the queue and false if otherwise\\n     * @dev Linearly scans from _q.first to _q.last looking for `_item`\\n     * @param _item Item being searched for in queue\\n     * @return True if `_item` currently exists in queue, false if otherwise\\n     **/\\n    function contains(Queue storage _q, bytes32 _item)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = _q.first; i <= _q.last; i++) {\\n            if (_q.queue[i] == _item) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Returns last item in queue\\n    /// @dev Returns bytes32(0) if queue empty\\n    function lastItem(Queue storage _q) internal view returns (bytes32) {\\n        return _q.queue[_q.last];\\n    }\\n\\n    /// @notice Returns element at front of queue without removing element\\n    /// @dev Reverts if queue is empty\\n    function peek(Queue storage _q) internal view returns (bytes32 _item) {\\n        require(!isEmpty(_q), \\\"Empty\\\");\\n        _item = _q.queue[_q.first];\\n    }\\n\\n    /// @notice Returns true if queue is empty and false if otherwise\\n    function isEmpty(Queue storage _q) internal view returns (bool) {\\n        return _q.last < _q.first;\\n    }\\n\\n    /// @notice Returns number of elements in queue\\n    function length(Queue storage _q) internal view returns (uint256) {\\n        uint128 _last = _q.last;\\n        uint128 _first = _q.first;\\n        // Cannot underflow unless state is corrupted\\n        return _length(_last, _first);\\n    }\\n\\n    /// @notice Returns number of elements between `_last` and `_first` (used internally)\\n    function _length(uint128 _last, uint128 _first)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return uint256(_last + 1 - _first);\\n    }\\n}\\n\",\"keccak256\":\"0x35bd0ee68a71d77e15d888356eeb139e86412f9f880ec681bf5f417907a8a8f5\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/libs/TypeCasts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\nimport \\\"../../../summa/TypedMemView.sol\\\";\\n\\nlibrary TypeCasts {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    function coerceBytes32(string memory _s)\\n        internal\\n        pure\\n        returns (bytes32 _b)\\n    {\\n        _b = bytes(_s).ref(0).index(0, uint8(bytes(_s).length));\\n    }\\n\\n    // treat it as a null-terminated string of max 32 bytes\\n    function coerceString(bytes32 _buf)\\n        internal\\n        pure\\n        returns (string memory _newStr)\\n    {\\n        uint8 _slen = 0;\\n        while (_slen < 32 && _buf[_slen] != 0) {\\n            _slen++;\\n        }\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _newStr := mload(0x40)\\n            mstore(0x40, add(_newStr, 0x40)) // may end up with extra\\n            mstore(_newStr, _slen)\\n            mstore(add(_newStr, 0x20), _buf)\\n        }\\n    }\\n\\n    // alignment preserving cast\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    // alignment preserving cast\\n    function bytes32ToAddress(bytes32 _buf) internal pure returns (address) {\\n        return address(uint160(uint256(_buf)));\\n    }\\n}\\n\",\"keccak256\":\"0x6fcfedd9d3c92f3cc35a4630c0f4f0cfef74959475cf592c3001d60d5c27d459\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/core/upgrade/UpgradeBeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title UpgradeBeaconProxy\\n * @notice\\n * Proxy contract which delegates all logic, including initialization,\\n * to an implementation contract.\\n * The implementation contract is stored within an Upgrade Beacon contract;\\n * the implementation contract can be changed by performing an upgrade on the Upgrade Beacon contract.\\n * The Upgrade Beacon contract for this Proxy is immutably specified at deployment.\\n * @dev This implementation combines the gas savings of keeping the UpgradeBeacon address outside of contract storage\\n * found in 0age's implementation:\\n * https://github.com/dharma-eng/dharma-smart-wallet/blob/master/contracts/proxies/smart-wallet/UpgradeBeaconProxyV1.sol\\n * With the added safety checks that the UpgradeBeacon and implementation are contracts at time of deployment\\n * found in OpenZeppelin's implementation:\\n * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol\\n */\\ncontract UpgradeBeaconProxy {\\n    // ============ Immutables ============\\n\\n    // Upgrade Beacon address is immutable (therefore not kept in contract storage)\\n    address private immutable upgradeBeacon;\\n\\n    // ============ Constructor ============\\n\\n    /**\\n     * @notice Validate that the Upgrade Beacon is a contract, then set its\\n     * address immutably within this contract.\\n     * Validate that the implementation is also a contract,\\n     * Then call the initialization function defined at the implementation.\\n     * The deployment will revert and pass along the\\n     * revert reason if the initialization function reverts.\\n     * @param _upgradeBeacon Address of the Upgrade Beacon to be stored immutably in the contract\\n     * @param _initializationCalldata Calldata supplied when calling the initialization function\\n     */\\n    constructor(address _upgradeBeacon, bytes memory _initializationCalldata)\\n        payable\\n    {\\n        // Validate the Upgrade Beacon is a contract\\n        require(Address.isContract(_upgradeBeacon), \\\"beacon !contract\\\");\\n        // set the Upgrade Beacon\\n        upgradeBeacon = _upgradeBeacon;\\n        // Validate the implementation is a contract\\n        address _implementation = _getImplementation(_upgradeBeacon);\\n        require(\\n            Address.isContract(_implementation),\\n            \\\"beacon implementation !contract\\\"\\n        );\\n        // Call the initialization function on the implementation\\n        if (_initializationCalldata.length > 0) {\\n            _initialize(_implementation, _initializationCalldata);\\n        }\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /**\\n     * @notice Forwards all calls with data to _fallback()\\n     * No public functions are declared on the contract, so all calls hit fallback\\n     */\\n    fallback() external payable {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @notice Forwards all calls with no data to _fallback()\\n     */\\n    receive() external payable {\\n        _fallback();\\n    }\\n\\n    // ============ Private Functions ============\\n\\n    /**\\n     * @notice Call the initialization function on the implementation\\n     * Used at deployment to initialize the proxy\\n     * based on the logic for initialization defined at the implementation\\n     * @param _implementation - Contract to which the initalization is delegated\\n     * @param _initializationCalldata - Calldata supplied when calling the initialization function\\n     */\\n    function _initialize(\\n        address _implementation,\\n        bytes memory _initializationCalldata\\n    ) private {\\n        // Delegatecall into the implementation, supplying initialization calldata.\\n        (bool _ok, ) = _implementation.delegatecall(_initializationCalldata);\\n        // Revert and include revert data if delegatecall to implementation reverts.\\n        if (!_ok) {\\n            assembly {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Delegates function calls to the implementation contract returned by the Upgrade Beacon\\n     */\\n    function _fallback() private {\\n        _delegate(_getImplementation());\\n    }\\n\\n    /**\\n     * @notice Delegate function execution to the implementation contract\\n     * @dev This is a low level function that doesn't return to its internal\\n     * call site. It will return whatever is returned by the implementation to the\\n     * external caller, reverting and returning the revert data if implementation\\n     * reverts.\\n     * @param _implementation - Address to which the function execution is delegated\\n     */\\n    function _delegate(address _implementation) private {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n            // Delegatecall to the implementation, supplying calldata and gas.\\n            // Out and outsize are set to zero - instead, use the return buffer.\\n            let result := delegatecall(\\n                gas(),\\n                _implementation,\\n                0,\\n                calldatasize(),\\n                0,\\n                0\\n            )\\n            // Copy the returned data from the return buffer.\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            // Delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Call the Upgrade Beacon to get the current implementation contract address\\n     * @return _implementation Address of the current implementation.\\n     */\\n    function _getImplementation()\\n        private\\n        view\\n        returns (address _implementation)\\n    {\\n        _implementation = _getImplementation(upgradeBeacon);\\n    }\\n\\n    /**\\n     * @notice Call the Upgrade Beacon to get the current implementation contract address\\n     * @dev _upgradeBeacon is passed as a parameter so that\\n     * we can also use this function in the constructor,\\n     * where we can't access immutable variables.\\n     * @param _upgradeBeacon Address of the UpgradeBeacon storing the current implementation\\n     * @return _implementation Address of the current implementation.\\n     */\\n    function _getImplementation(address _upgradeBeacon)\\n        private\\n        view\\n        returns (address _implementation)\\n    {\\n        // Get the current implementation address from the upgrade beacon.\\n        (bool _ok, bytes memory _returnData) = _upgradeBeacon.staticcall(\\\"\\\");\\n        // Revert and pass along revert message if call to upgrade beacon reverts.\\n        require(_ok, string(_returnData));\\n        // Set the implementation to the address returned from the upgrade beacon.\\n        _implementation = abi.decode(_returnData, (address));\\n    }\\n}\\n\",\"keccak256\":\"0x9ec1afb0c212ea916e715c6dccb2738b18f7cbd191a6d20b01994cfaf98e4cba\",\"license\":\"MIT\"},\"contracts/nomad/router/Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ Internal Imports ============\\nimport {XAppConnectionClient} from \\\"./XAppConnectionClient.sol\\\";\\n// ============ External Imports ============\\nimport {IMessageRecipient} from \\\"../core/interfaces/IMessageRecipient.sol\\\";\\n\\nabstract contract Router is XAppConnectionClient, IMessageRecipient {\\n    // ============ Mutable Storage ============\\n\\n    mapping(uint32 => bytes32) public remotes;\\n    uint256[49] private __GAP; // gap for upgrade safety\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Only accept messages from a remote Router contract\\n     * @param _origin The domain the message is coming from\\n     * @param _router The address the message is coming from\\n     */\\n    modifier onlyRemoteRouter(uint32 _origin, bytes32 _router) {\\n        require(_isRemoteRouter(_origin, _router), \\\"!remote router\\\");\\n        _;\\n    }\\n\\n    // ============ External functions ============\\n\\n    /**\\n     * @notice Register the address of a Router contract for the same xApp on a remote chain\\n     * @param _domain The domain of the remote xApp Router\\n     * @param _router The address of the remote xApp Router\\n     */\\n    function enrollRemoteRouter(uint32 _domain, bytes32 _router)\\n        external\\n        onlyOwner\\n    {\\n        remotes[_domain] = _router;\\n    }\\n\\n    // ============ Virtual functions ============\\n\\n    function handle(\\n        uint32 _origin,\\n        uint32 _nonce,\\n        bytes32 _sender,\\n        bytes memory _message\\n    ) external virtual override;\\n\\n    // ============ Internal functions ============\\n    /**\\n     * @notice Return true if the given domain / router is the address of a remote xApp Router\\n     * @param _domain The domain of the potential remote xApp Router\\n     * @param _router The address of the potential remote xApp Router\\n     */\\n    function _isRemoteRouter(uint32 _domain, bytes32 _router)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return remotes[_domain] == _router && _router != bytes32(0);\\n    }\\n\\n    /**\\n     * @notice Assert that the given domain has a xApp Router registered and return its address\\n     * @param _domain The domain of the chain for which to get the xApp Router\\n     * @return _remote The address of the remote xApp Router on _domain\\n     */\\n    function _mustHaveRemote(uint32 _domain)\\n        internal\\n        view\\n        returns (bytes32 _remote)\\n    {\\n        _remote = remotes[_domain];\\n        require(_remote != bytes32(0), \\\"!remote\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd8a74c746e80ba01df7e168b8365c139230f4c52e4b8c9f9a5aa4109cab98277\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/nomad/router/XAppConnectionClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.15;\\n\\n// ============ External Imports ============\\nimport {Home} from \\\"../core/Home.sol\\\";\\nimport {XAppConnectionManager} from \\\"../core/XAppConnectionManager.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract XAppConnectionClient is OwnableUpgradeable {\\n    // ============ Mutable Storage ============\\n\\n    XAppConnectionManager public xAppConnectionManager;\\n    uint256[49] private __GAP; // gap for upgrade safety\\n\\n    // ============ Modifiers ============\\n\\n    /**\\n     * @notice Only accept messages from an Nomad Replica contract\\n     */\\n    modifier onlyReplica() {\\n        require(_isReplica(msg.sender), \\\"!replica\\\");\\n        _;\\n    }\\n\\n    // ======== Initializer =========\\n\\n    function __XAppConnectionClient_initialize(address _xAppConnectionManager)\\n        internal\\n    {\\n        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\n        __Ownable_init();\\n    }\\n\\n    // ============ External functions ============\\n\\n    /**\\n     * @notice Modify the contract the xApp uses to validate Replica contracts\\n     * @param _xAppConnectionManager The address of the xAppConnectionManager contract\\n     */\\n    function setXAppConnectionManager(address _xAppConnectionManager)\\n        external\\n        onlyOwner\\n    {\\n        xAppConnectionManager = XAppConnectionManager(_xAppConnectionManager);\\n    }\\n\\n    // ============ Internal functions ============\\n\\n    /**\\n     * @notice Get the local Home contract from the xAppConnectionManager\\n     * @return The local Home contract\\n     */\\n    function _home() internal view returns (Home) {\\n        return xAppConnectionManager.home();\\n    }\\n\\n    /**\\n     * @notice Determine whether _potentialReplica is an enrolled Replica from the xAppConnectionManager\\n     * @param _potentialReplica The candidate to be tested. Violently.\\n     * @return True if _potentialReplica is an enrolled Replica\\n     */\\n    function _isReplica(address _potentialReplica)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return xAppConnectionManager.isReplica(_potentialReplica);\\n    }\\n\\n    /**\\n     * @notice Get the local domain from the xAppConnectionManager\\n     * @return The local domain\\n     */\\n    function _localDomain() internal view virtual returns (uint32) {\\n        return xAppConnectionManager.localDomain();\\n    }\\n}\\n\",\"keccak256\":\"0xea1944e9bafbd53143742272b1e54e4e353054414b9e806a637b5442e6a34818\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/summa/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.15;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n    // The null view\\n    bytes29 public constant NULL =\\n        hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {\\n            return 0x30;\\n        } // 0\\n        if (_nibble == 0xf1) {\\n            return 0x31;\\n        } // 1\\n        if (_nibble == 0xf2) {\\n            return 0x32;\\n        } // 2\\n        if (_nibble == 0xf3) {\\n            return 0x33;\\n        } // 3\\n        if (_nibble == 0xf4) {\\n            return 0x34;\\n        } // 4\\n        if (_nibble == 0xf5) {\\n            return 0x35;\\n        } // 5\\n        if (_nibble == 0xf6) {\\n            return 0x36;\\n        } // 6\\n        if (_nibble == 0xf7) {\\n            return 0x37;\\n        } // 7\\n        if (_nibble == 0xf8) {\\n            return 0x38;\\n        } // 8\\n        if (_nibble == 0xf9) {\\n            return 0x39;\\n        } // 9\\n        if (_nibble == 0xfa) {\\n            return 0x61;\\n        } // a\\n        if (_nibble == 0xfb) {\\n            return 0x62;\\n        } // b\\n        if (_nibble == 0xfc) {\\n            return 0x63;\\n        } // c\\n        if (_nibble == 0xfd) {\\n            return 0x64;\\n        } // d\\n        if (_nibble == 0xfe) {\\n            return 0x65;\\n        } // e\\n        if (_nibble == 0xff) {\\n            return 0x66;\\n        } // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b)\\n        internal\\n        pure\\n        returns (uint256 first, uint256 second)\\n    {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v =\\n            ((v >> 8) &\\n                0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v &\\n                0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) <<\\n                8);\\n        // swap 2-byte long pairs\\n        v =\\n            ((v >> 16) &\\n                0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v &\\n                0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) <<\\n                16);\\n        // swap 4-byte long pairs\\n        v =\\n            ((v >> 32) &\\n                0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v &\\n                0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) <<\\n                32);\\n        // swap 8-byte long pairs\\n        v =\\n            ((v >> 64) &\\n                0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v &\\n                0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) <<\\n                64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n                sub(_len, 1),\\n                0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {\\n            return false;\\n        }\\n        uint256 _end = end(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected)\\n        internal\\n        pure\\n        returns (bytes29)\\n    {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType)\\n        internal\\n        pure\\n        returns (bytes29 newView)\\n    {\\n        // then | in the new type\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(\\n        uint256 _type,\\n        uint256 _loc,\\n        uint256 _len\\n    ) private pure returns (bytes29 newView) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc)) // insert loc\\n            newView := shl(24, or(newView, _len)) // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(\\n        uint256 _type,\\n        uint256 _loc,\\n        uint256 _len\\n    ) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType)\\n        internal\\n        pure\\n        returns (bytes29)\\n    {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20) // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK; // assembly can't use globals\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(\\n        bytes29 memView,\\n        uint256 _index,\\n        uint256 _len,\\n        uint40 newType\\n    ) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(\\n        bytes29 memView,\\n        uint256 _len,\\n        uint40 newType\\n    ) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(\\n        bytes29 memView,\\n        uint256 _len,\\n        uint40 newType\\n    ) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(\\n        bytes29 memView,\\n        uint256 _index,\\n        uint8 _bytes\\n    ) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {\\n            return bytes32(0);\\n        }\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(\\n                indexErrOverrun(\\n                    loc(memView),\\n                    len(memView),\\n                    _index,\\n                    uint256(_bytes)\\n                )\\n            );\\n        }\\n        require(\\n            _bytes <= 32,\\n            \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\"\\n        );\\n\\n        uint8 bitLength = _bytes * 8;\\n        uint256 _loc = loc(memView);\\n        uint256 _mask = leftMask(bitLength);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            result := and(mload(add(_loc, _index)), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(\\n        bytes29 memView,\\n        uint256 _index,\\n        uint8 _bytes\\n    ) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(\\n        bytes29 memView,\\n        uint256 _index,\\n        uint8 _bytes\\n    ) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return\\n            (loc(left) == loc(right) && len(left) == len(right)) ||\\n            keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return\\n            left == right ||\\n            (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc)\\n        private\\n        view\\n        returns (bytes29 written)\\n    {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(\\n            isValid(memView),\\n            \\\"TypedMemView/copyTo - Invalid pointer deref\\\"\\n        );\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n            // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n            // use the identity precompile to copy\\n            // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\\n        private\\n        view\\n        returns (bytes29 unsafeView)\\n    {\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews)\\n        internal\\n        view\\n        returns (bytes memory ret)\\n    {\\n        uint256 ptr;\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n            // solium-disable-previous-line security/no-inline-assembly\\n            // store the legnth\\n            mstore(ptr, _written)\\n            // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19500e15f85b58776682682aad91f3797b8d5e0f0b109135e3d5f24a8d208918\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/utils/Encoding.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity ^0.8.15;\\n\\nlibrary Encoding {\\n    // ============ Constants ============\\n\\n    bytes private constant NIBBLE_LOOKUP = \\\"0123456789abcdef\\\";\\n\\n    // ============ Internal Functions ============\\n\\n    /**\\n     * @notice Encode a uint32 in its DECIMAL representation, with leading\\n     * zeroes.\\n     * @param _num The number to encode\\n     * @return _encoded The encoded number, suitable for use in abi.\\n     * encodePacked\\n     */\\n    function decimalUint32(uint32 _num)\\n        internal\\n        pure\\n        returns (uint80 _encoded)\\n    {\\n        uint80 ASCII_0 = 0x30;\\n        // all over/underflows are impossible\\n        // this will ALWAYS produce 10 decimal characters\\n        for (uint8 i = 0; i < 10; i += 1) {\\n            _encoded |= ((_num % 10) + ASCII_0) << (i * 8);\\n            _num = _num / 10;\\n        }\\n    }\\n\\n    /**\\n     * @notice Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     * `second` contains the encoded lower 16 bytes.\\n     * @param _bytes The 32 bytes as uint256\\n     * @return _firstHalf The top 16 bytes\\n     * @return _secondHalf The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _bytes)\\n        internal\\n        pure\\n        returns (uint256 _firstHalf, uint256 _secondHalf)\\n    {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _b = uint8(_bytes >> (i * 8));\\n            _firstHalf |= _byteHex(_b);\\n            if (i != 16) {\\n                _firstHalf <<= 16;\\n            }\\n        }\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255; i -= 1) {\\n            uint8 _b = uint8(_bytes >> (i * 8));\\n            _secondHalf |= _byteHex(_b);\\n            if (i != 0) {\\n                _secondHalf <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _byte The byte\\n     * @return _char The encoded hex character\\n     */\\n    function _nibbleHex(uint8 _byte) private pure returns (uint8 _char) {\\n        uint8 _nibble = _byte & 0x0f; // keep bottom 4, 0 top 4\\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\\n    }\\n\\n    /**\\n     * @notice Returns a uint16 containing the hex-encoded byte.\\n     * @param _byte The byte\\n     * @return _encoded The hex-encoded byte\\n     */\\n    function _byteHex(uint8 _byte) private pure returns (uint16 _encoded) {\\n        _encoded |= _nibbleHex(_byte >> 4); // top 4 bits\\n        _encoded <<= 8;\\n        _encoded |= _nibbleHex(_byte); // lower 4 bits\\n    }\\n}\\n\",\"keccak256\":\"0xf3ca83d2f372aa2fa880f63421963841727820787e4c9852584d21a57d99268d\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b9e806100206000396000f3fe6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146101b15780639d23c4c7146101dc578063ab2dc3f514610207578063b49c53a714610230578063bc7dbab314610259578063f2fde38b14610282576100b2565b80631cabf08f146100b75780633339df96146100e057806341bdc8b51461010b578063485cc95514610134578063715018a61461015d57806383bbb80614610174576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100de60048036038101906100d99190612e94565b6102ab565b005b3480156100ec57600080fd5b506100f5610392565b6040516101029190612f5a565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190612f75565b6103b8565b005b34801561014057600080fd5b5061015b60048036038101906101569190612fa2565b610404565b005b34801561016957600080fd5b50610172610586565b005b34801561018057600080fd5b5061019b60048036038101906101969190612fe2565b610590565b6040516101a8919061301e565b60405180910390f35b3480156101bd57600080fd5b506101c66105a8565b6040516101d39190613048565b60405180910390f35b3480156101e857600080fd5b506101f16105d2565b6040516101fe9190613084565b60405180910390f35b34801561021357600080fd5b5061022e600480360381019061022991906131e5565b6105f8565b005b34801561023c57600080fd5b5061025760048036038101906102529190613268565b61076d565b005b34801561026557600080fd5b50610280600480360381019061027b9190613308565b61079d565b005b34801561028e57600080fd5b506102a960048036038101906102a49190612f75565b61088f565b005b6000801b81036102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e7906133ff565b60405180910390fd5b6000806102fd8686610912565b91509150600061030e848784610d28565b905061031b858483610d7f565b8463ffffffff163373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fcf20fd9072af09cee97ee48e835f72e237cebf880d75143434214e57d6496d60878a60405161038192919061342e565b60405180910390a450505050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103c0610e9a565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff161590508080156104355750600160008054906101000a900460ff1660ff16105b80610462575061044430610f18565b1580156104615750600160008054906101000a900460ff1660ff16145b5b6104a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610498906134c9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156104de576001600060016101000a81548160ff0219169083151502179055505b8260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061052882610f3b565b80156105815760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105789190613531565b60405180910390a15b505050565b61058e610e9a565b565b60976020528060005260406000206000915090505481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61060133610f87565b610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790613598565b60405180910390fd5b838261064c828261102c565b61068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290613604565b60405180910390fd5b60006106af6106a460008661106790919063ffffffff16565b62ffffff1916611092565b905060006106c28262ffffff19166110b2565b905060006106d58362ffffff191661111e565b90506106e68162ffffff19166111b5565b156106fc576106f7898984846111c9565b610762565b61070b8162ffffff19166111f1565b1561071f5761071a8282611205565b610761565b6000610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790613670565b60405180910390fd5b5b5b505050505050505050565b610775610e9a565b80609760008463ffffffff1663ffffffff168152602001908152602001600020819055505050565b6000806107aa8888610912565b9150915060006108098689846107bf3361141f565b89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611442565b9050610816878483610d7f565b8663ffffffff163373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcf20fd9072af09cee97ee48e835f72e237cebf880d75143434214e57d6496d60898c60405161087c92919061342e565b60405180910390a4505050505050505050565b610897610e9a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90613702565b60405180910390fd5b61090f8161149f565b50565b60008060008311610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094f9061376e565b60405180910390fd5b600084905060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c86415cb866040518263ffffffff1660e01b81526004016109b89190613048565b602060405180830381865afa1580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f991906137c6565b15610b9157610a2b3330868873ffffffffffffffffffffffffffffffffffffffff16611565909392919063ffffffff16565b610b8a8173ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a79573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610aa291906138c7565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1691906138c7565b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b85919061393c565b6115ee565b9150610c70565b8073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b8152600401610bcc929190613969565b600060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16634815fcb16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906139a7565b91505b60008060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1537686886040518263ffffffff1660e01b8152600401610cce9190613048565b6040805180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e91906139e9565b91509150610d1c828261162a565b94505050509250929050565b6000610d7660036007811115610d4157610d40613a29565b5b6003868686604051602001610d599493929190613b09565b60405160208183030381529060405261106790919063ffffffff16565b90509392505050565b6000610d8a8461167b565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639fa92f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d9190613b95565b73ffffffffffffffffffffffffffffffffffffffff1663fa31de018583610e4487876116e9565b6040518463ffffffff1660e01b8152600401610e6293929190613c26565b600060405180830381600087803b158015610e7c57600080fd5b505af1158015610e90573d6000803e3d6000fd5b5050505050505050565b610ea2611822565b73ffffffffffffffffffffffffffffffffffffffff16610ec06105a8565b73ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90613cb0565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f8461182a565b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635190bc53836040518263ffffffff1660e01b8152600401610fe49190613048565b602060405180830381865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906137c6565b9050919050565b600081609760008563ffffffff1663ffffffff1681526020019081526020016000205414801561105f57506000801b8214155b905092915050565b6000808351905060006020850190506110888464ffffffffff168284611883565b9250505092915050565b60006110ab6110a0836118f1565b62ffffff1916611944565b9050919050565b60008160026110e28160078111156110cd576110cc613a29565b5b8362ffffff191661199690919063ffffffff16565b5061111560006024600160078111156110fe576110fd613a29565b5b8762ffffff1916611a44909392919063ffffffff16565b92505050919050565b600081600261114e81600781111561113957611138613a29565b5b8362ffffff191661199690919063ffffffff16565b50600060246111628662ffffff1916611af0565b6bffffffffffffffffffffffff1661117a9190613cff565b9050600061118786611b10565b60ff1690506111aa602483838962ffffff1916611a44909392919063ffffffff16565b945050505050919050565b60006111c2826003611b36565b9050919050565b60006111da8262ffffff1916611b9a565b90506111e98585858585611bee565b505050505050565b60006111fe826007611b36565b9050919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b869d89a6112548562ffffff1916611efc565b6112638662ffffff1916611f53565b6040518363ffffffff1660e01b8152600401611280929190613d33565b6020604051808303816000875af115801561129f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c39190613d71565b905060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c86415cb826040518263ffffffff1660e01b81526004016113209190613048565b602060405180830381865afa15801561133d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136191906137c6565b156113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890613dea565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16636bd080496113cc8462ffffff1916611faa565b6040518263ffffffff1660e01b81526004016113e89190613e0a565b600060405180830381600087803b15801561140257600080fd5b505af1158015611416573d6000803e3d6000fd5b50505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1660001b9050919050565b60006114946005600781111561145b5761145a613a29565b5b6005888888888860405160200161147796959493929190613e61565b60405160208183030381529060405261106790919063ffffffff16565b905095945050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115e8846323b872dd60e01b85858560405160240161158693929190613ecd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612001565b50505050565b60008351848451858560405160200161160b959493929190613f62565b6040516020818303038152906040528051906020012090509392505050565b60006116736001600781111561164357611642613a29565b5b8484604051602001611656929190613fef565b60405160208183030381529060405261106790919063ffffffff16565b905092915050565b6000609760008363ffffffff1663ffffffff1681526020019081526020016000205490506000801b81036116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db90614067565b60405180910390fd5b919050565b606082600161171981600781111561170457611703613a29565b5b8362ffffff191661199690919063ffffffff16565b50611723846120c8565b611762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611759906140d3565b60405180910390fd5b6000600267ffffffffffffffff81111561177f5761177e6130ba565b5b6040519080825280602002602001820160405280156117ad5781602001602082028036833780820191505090505b50905085816000815181106117c5576117c46140f3565b5b602002602001019062ffffff1916908162ffffff19168152505084816001815181106117f4576117f36140f3565b5b602002602001019062ffffff1916908162ffffff191681525050611817816120fa565b935050505092915050565b600033905090565b600060019054906101000a900460ff16611879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187090614194565b60405180910390fd5b61188161215d565b565b60008061189983856121be90919063ffffffff16565b90506040518111156118aa57600090505b600081036118db577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009150506118ea565b6118e68585856121d4565b9150505b9392505050565b60006118fc826121f5565b156119345761192d6002600781111561191857611917613a29565b5b8362ffffff191661225e90919063ffffffff16565b905061193f565b61193c612279565b90505b919050565b600061194f826122a1565b61198e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198590614200565b60405180910390fd5b819050919050565b60006119a283836122e3565b611a3b5760006119c06119b485612306565b64ffffffffff16612313565b91505060006119d58464ffffffffff16612313565b915050600082826040516020016119ed929190614304565b6040516020818303038152906040529050806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a32919061437f565b60405180910390fd5b82905092915050565b600080611a50866123e3565b6bffffffffffffffffffffffff169050611a6986612403565b611a8e85611a8088856121be90919063ffffffff16565b6121be90919063ffffffff16565b1115611abd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000915050611ae8565b611ad085826121be90919063ffffffff16565b9050611ae48364ffffffffff168286611883565b9150505b949350505050565b6000806bffffffffffffffffffffffff9050808360181c16915050919050565b6000611b2f602460018462ffffff19166124369092919063ffffffff16565b9050919050565b6000816007811115611b4b57611b4a613a29565b5b60ff16611b578461246d565b60ff16148015611b925750816007811115611b7557611b74613a29565b5b611b7e84612493565b6007811115611b9057611b8f613a29565b5b145b905092915050565b6000816003611bca816007811115611bb557611bb4613a29565b5b8362ffffff191661199690919063ffffffff16565b50611be5600d8562ffffff19166124c090919063ffffffff16565b92505050919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b869d89a611c3d8662ffffff1916611efc565b611c4c8762ffffff1916611f53565b6040518363ffffffff1660e01b8152600401611c69929190613d33565b6020604051808303816000875af1158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190613d71565b90506000611cbf8462ffffff19166124d6565b905060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c86415cb836040518263ffffffff1660e01b8152600401611d1c9190613048565b602060405180830381865afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d91906137c6565b15611d9257611d8d83828473ffffffffffffffffffffffffffffffffffffffff166124fc9092919063ffffffff16565b611e79565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b8152600401611dcd929190613969565b600060405180830381600087803b158015611de757600080fd5b505af1158015611dfb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663cc2ab7c7611e2a8662ffffff1916612582565b6040518263ffffffff1660e01b8152600401611e46919061301e565b600060405180830381600087803b158015611e6057600080fd5b505af1158015611e74573d6000803e3d6000fd5b505050505b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16611eb189896125a8565b67ffffffffffffffff167ffeb81b556809bdb56115720c39438faa83a27379815edc26111d0571d66b5bf284604051611eea9190613e0a565b60405180910390a45095945050505050565b6000816001611f2c816007811115611f1757611f16613a29565b5b8362ffffff191661199690919063ffffffff16565b50611f4a600060048662ffffff19166124369092919063ffffffff16565b92505050919050565b6000816001611f83816007811115611f6e57611f6d613a29565b5b8362ffffff191661199690919063ffffffff16565b50611fa1600460208662ffffff19166125cf9092919063ffffffff16565b92505050919050565b6000816007611fda816007811115611fc557611fc4613a29565b5b8362ffffff191661199690919063ffffffff16565b50611ff8602160208662ffffff19166124369092919063ffffffff16565b92505050919050565b6000612063826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127239092919063ffffffff16565b90506000815111156120c3578080602001905181019061208391906137c6565b6120c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b990614413565b60405180910390fd5b5b505050565b60006120d3826111b5565b806120e357506120e28261273b565b5b806120f357506120f2826111f1565b5b9050919050565b606060006040519050600061211b846020846121169190614433565b61274f565b9050600061212882611af0565b6bffffffffffffffffffffffff1690506000612143836127f3565b905081845260208185010160405283945050505050919050565b600060019054906101000a900460ff166121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390614194565b60405180910390fd5b6121bc6121b7611822565b61149f565b565b600081836121cc9190614433565b905092915050565b600083811760601b905082811760601b905081811760181b90509392505050565b6000806122078362ffffff1916611af0565b6bffffffffffffffffffffffff169050606160246122259190614433565b81148061223f57506081602461223b9190614433565b8110155b806122565750602160246122539190614433565b81145b915050919050565b60008260281b60281c811790508160d81b8117905092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000905090565b600064ffffffffff6122b283612306565b64ffffffffff16036122c757600090506122de565b60006122d283612403565b90506040518111199150505b919050565b60008164ffffffffff166122f684612306565b64ffffffffff1614905092915050565b60008160d81c9050919050565b6000806000601f90505b600f8160ff1611156123795760006008826123389190614489565b60ff1685901c905061234981612811565b61ffff168417935060108260ff161461236457601084901b93505b5060018161237291906144c4565b905061231d565b506000600f90505b60ff8160ff1610156123dd57600060088261239c9190614489565b60ff1685901c90506123ad81612811565b61ffff168317925060008260ff16146123c857601083901b92505b506001816123d691906144c4565b9050612381565b50915091565b6000806bffffffffffffffffffffffff9050808360781c16915050919050565b600061240e82611af0565b612417836123e3565b6124219190614510565b6bffffffffffffffffffffffff169050919050565b6000600882602061244791906144c4565b6124519190614489565b60ff1661245f8585856125cf565b60001c901c90509392505050565b600061248c600060018462ffffff19166124369092919063ffffffff16565b9050919050565b60006124a48262ffffff1916612306565b60ff1660078111156124b9576124b8613a29565b5b9050919050565b60006124ce83836014612436565b905092915050565b60006124f5602160208462ffffff19166124369092919063ffffffff16565b9050919050565b61257d8363a9059cbb60e01b848460405160240161251b929190613969565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612001565b505050565b60006125a1604160208462ffffff19166125cf9092919063ffffffff16565b9050919050565b60008163ffffffff1660208463ffffffff1667ffffffffffffffff16901b17905092915050565b6000808260ff16036125e6576000801b905061271c565b6125ef84611af0565b6bffffffffffffffffffffffff166126138360ff16856121be90919063ffffffff16565b111561269057612654612625856123e3565b6bffffffffffffffffffffffff1661263c86611af0565b6bffffffffffffffffffffffff16858560ff1661284a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612687919061437f565b60405180910390fd5b60208260ff1611156126d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ce906145c4565b60405180910390fd5b60006008836126e69190614489565b905060006126f3866123e3565b6bffffffffffffffffffffffff169050600061270e836128b8565b905080868301511693505050505b9392505050565b606061273284846000856128e7565b90509392505050565b6000612748826005611b36565b9050919050565b6000604051828111156127625760206060fd5b506000805b84518110156127dd576000858281518110612785576127846140f3565b5b602002602001015190506127a481848761279f9190614433565b6129fb565b506127ae81611af0565b6bffffffffffffffffffffffff16836127c79190614433565b92505080806127d5906145e4565b915050612767565b506127ea600084836121d4565b91505092915050565b6000602061280083612b06565b61280a919061462c565b9050919050565b600061282360048360ff16901c612b45565b60ff168117905060088161ffff16901b905061283e82612b45565b60ff1681179050919050565b6060600061285786612313565b915050600061286586612313565b915050600061287386612313565b915050600061288186612313565b9150508383838360405160200161289b949392919061484a565b604051602081830303815290604052945050505050949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000600183031d9050919050565b60608247101561292c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292390614941565b60405180910390fd5b61293585612ca5565b612974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296b906149ad565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161299d91906149cd565b60006040518083038185875af1925050503d80600081146129da576040519150601f19603f3d011682016040523d82523d6000602084013e6129df565b606091505b50915091506129ef828286612cc8565b92505050949350505050565b6000612a0683612d2f565b612a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3c90614a56565b60405180910390fd5b612a4e836122a1565b612a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8490614ae8565b60405180910390fd5b6000612a9884611af0565b6bffffffffffffffffffffffff1690506000612ab3856123e3565b6bffffffffffffffffffffffff1690506000604051905084811115612ad85760206060fd5b8285848460045afa50612afb612aed87612306565b64ffffffffff1686856121d4565b935050505092915050565b60006020612b346020612b1885611af0565b6bffffffffffffffffffffffff166121be90919063ffffffff16565b612b3e9190614b37565b9050919050565b60008060f08317905060f08160ff1603612b63576030915050612ca0565b60f18160ff1603612b78576031915050612ca0565b60f28160ff1603612b8d576032915050612ca0565b60f38160ff1603612ba2576033915050612ca0565b60f48160ff1603612bb7576034915050612ca0565b60f58160ff1603612bcc576035915050612ca0565b60f68160ff1603612be1576036915050612ca0565b60f78160ff1603612bf6576037915050612ca0565b60f88160ff1603612c0b576038915050612ca0565b60f98160ff1603612c20576039915050612ca0565b60fa8160ff1603612c35576061915050612ca0565b60fb8160ff1603612c4a576062915050612ca0565b60fc8160ff1603612c5f576063915050612ca0565b60fd8160ff1603612c74576064915050612ca0565b60fe8160ff1603612c89576065915050612ca0565b60ff8160ff1603612c9e576066915050612ca0565b505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315612cd857829050612d28565b600083511115612ceb5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1f919061437f565b60405180910390fd5b9392505050565b6000612d3a82612d42565b159050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000062ffffff19168262ffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612db982612d8e565b9050919050565b612dc981612dae565b8114612dd457600080fd5b50565b600081359050612de681612dc0565b92915050565b6000819050919050565b612dff81612dec565b8114612e0a57600080fd5b50565b600081359050612e1c81612df6565b92915050565b600063ffffffff82169050919050565b612e3b81612e22565b8114612e4657600080fd5b50565b600081359050612e5881612e32565b92915050565b6000819050919050565b612e7181612e5e565b8114612e7c57600080fd5b50565b600081359050612e8e81612e68565b92915050565b60008060008060808587031215612eae57612ead612d84565b5b6000612ebc87828801612dd7565b9450506020612ecd87828801612e0d565b9350506040612ede87828801612e49565b9250506060612eef87828801612e7f565b91505092959194509250565b6000819050919050565b6000612f20612f1b612f1684612d8e565b612efb565b612d8e565b9050919050565b6000612f3282612f05565b9050919050565b6000612f4482612f27565b9050919050565b612f5481612f39565b82525050565b6000602082019050612f6f6000830184612f4b565b92915050565b600060208284031215612f8b57612f8a612d84565b5b6000612f9984828501612dd7565b91505092915050565b60008060408385031215612fb957612fb8612d84565b5b6000612fc785828601612dd7565b9250506020612fd885828601612dd7565b9150509250929050565b600060208284031215612ff857612ff7612d84565b5b600061300684828501612e49565b91505092915050565b61301881612e5e565b82525050565b6000602082019050613033600083018461300f565b92915050565b61304281612dae565b82525050565b600060208201905061305d6000830184613039565b92915050565b600061306e82612f27565b9050919050565b61307e81613063565b82525050565b60006020820190506130996000830184613075565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130f2826130a9565b810181811067ffffffffffffffff82111715613111576131106130ba565b5b80604052505050565b6000613124612d7a565b905061313082826130e9565b919050565b600067ffffffffffffffff8211156131505761314f6130ba565b5b613159826130a9565b9050602081019050919050565b82818337600083830152505050565b600061318861318384613135565b61311a565b9050828152602081018484840111156131a4576131a36130a4565b5b6131af848285613166565b509392505050565b600082601f8301126131cc576131cb61309f565b5b81356131dc848260208601613175565b91505092915050565b600080600080608085870312156131ff576131fe612d84565b5b600061320d87828801612e49565b945050602061321e87828801612e49565b935050604061322f87828801612e7f565b925050606085013567ffffffffffffffff8111156132505761324f612d89565b5b61325c878288016131b7565b91505092959194509250565b6000806040838503121561327f5761327e612d84565b5b600061328d85828601612e49565b925050602061329e85828601612e7f565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126132c8576132c761309f565b5b8235905067ffffffffffffffff8111156132e5576132e46132a8565b5b602083019150836001820283011115613301576133006132ad565b5b9250929050565b60008060008060008060a0878903121561332557613324612d84565b5b600061333389828a01612dd7565b965050602061334489828a01612e0d565b955050604061335589828a01612e49565b945050606061336689828a01612e7f565b935050608087013567ffffffffffffffff81111561338757613386612d89565b5b61339389828a016132b2565b92509250509295509295509295565b600082825260208201905092915050565b7f2172656369700000000000000000000000000000000000000000000000000000600082015250565b60006133e96006836133a2565b91506133f4826133b3565b602082019050919050565b60006020820190508181036000830152613418816133dc565b9050919050565b61342881612dec565b82525050565b6000604082019050613443600083018561300f565b613450602083018461341f565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006134b3602e836133a2565b91506134be82613457565b604082019050919050565b600060208201905081810360008301526134e2816134a6565b9050919050565b6000819050919050565b600060ff82169050919050565b600061351b613516613511846134e9565b612efb565b6134f3565b9050919050565b61352b81613500565b82525050565b60006020820190506135466000830184613522565b92915050565b7f217265706c696361000000000000000000000000000000000000000000000000600082015250565b60006135826008836133a2565b915061358d8261354c565b602082019050919050565b600060208201905081810360008301526135b181613575565b9050919050565b7f2172656d6f746520726f75746572000000000000000000000000000000000000600082015250565b60006135ee600e836133a2565b91506135f9826135b8565b602082019050919050565b6000602082019050818103600083015261361d816135e1565b9050919050565b7f2176616c696420616374696f6e00000000000000000000000000000000000000600082015250565b600061365a600d836133a2565b915061366582613624565b602082019050919050565b600060208201905081810360008301526136898161364d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006136ec6026836133a2565b91506136f782613690565b604082019050919050565b6000602082019050818103600083015261371b816136df565b9050919050565b7f21616d6e74000000000000000000000000000000000000000000000000000000600082015250565b60006137586005836133a2565b915061376382613722565b602082019050919050565b600060208201905081810360008301526137878161374b565b9050919050565b60008115159050919050565b6137a38161378e565b81146137ae57600080fd5b50565b6000815190506137c08161379a565b92915050565b6000602082840312156137dc576137db612d84565b5b60006137ea848285016137b1565b91505092915050565b600067ffffffffffffffff82111561380e5761380d6130ba565b5b613817826130a9565b9050602081019050919050565b60005b83811015613842578082015181840152602081019050613827565b83811115613851576000848401525b50505050565b600061386a613865846137f3565b61311a565b905082815260208101848484011115613886576138856130a4565b5b613891848285613824565b509392505050565b600082601f8301126138ae576138ad61309f565b5b81516138be848260208601613857565b91505092915050565b6000602082840312156138dd576138dc612d84565b5b600082015167ffffffffffffffff8111156138fb576138fa612d89565b5b61390784828501613899565b91505092915050565b613919816134f3565b811461392457600080fd5b50565b60008151905061393681613910565b92915050565b60006020828403121561395257613951612d84565b5b600061396084828501613927565b91505092915050565b600060408201905061397e6000830185613039565b61398b602083018461341f565b9392505050565b6000815190506139a181612e68565b92915050565b6000602082840312156139bd576139bc612d84565b5b60006139cb84828501613992565b91505092915050565b6000815190506139e381612e32565b92915050565b60008060408385031215613a00576139ff612d84565b5b6000613a0e858286016139d4565b9250506020613a1f85828601613992565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60088110613a6957613a68613a29565b5b50565b6000819050613a7a82613a58565b919050565b6000613a8a82613a6c565b9050919050565b60008160f81b9050919050565b6000613aa982613a91565b9050919050565b613ac1613abc82613a7f565b613a9e565b82525050565b6000819050919050565b613ae2613add82612e5e565b613ac7565b82525050565b6000819050919050565b613b03613afe82612dec565b613ae8565b82525050565b6000613b158287613ab0565b600182019150613b258286613ad1565b602082019150613b358285613af2565b602082019150613b458284613ad1565b60208201915081905095945050505050565b6000613b6282612dae565b9050919050565b613b7281613b57565b8114613b7d57600080fd5b50565b600081519050613b8f81613b69565b92915050565b600060208284031215613bab57613baa612d84565b5b6000613bb984828501613b80565b91505092915050565b613bcb81612e22565b82525050565b600081519050919050565b600082825260208201905092915050565b6000613bf882613bd1565b613c028185613bdc565b9350613c12818560208601613824565b613c1b816130a9565b840191505092915050565b6000606082019050613c3b6000830186613bc2565b613c48602083018561300f565b8181036040830152613c5a8184613bed565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613c9a6020836133a2565b9150613ca582613c64565b602082019050919050565b60006020820190508181036000830152613cc981613c8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d0a82612dec565b9150613d1583612dec565b925082821015613d2857613d27613cd0565b5b828203905092915050565b6000604082019050613d486000830185613bc2565b613d55602083018461300f565b9392505050565b600081519050613d6b81612dc0565b92915050565b600060208284031215613d8757613d86612d84565b5b6000613d9584828501613d5c565b91505092915050565b7f4c4f43414c5f4f524947494e0000000000000000000000000000000000000000600082015250565b6000613dd4600c836133a2565b9150613ddf82613d9e565b602082019050919050565b60006020820190508181036000830152613e0381613dc7565b9050919050565b6000602082019050613e1f600083018461341f565b92915050565b600081905092915050565b6000613e3b82613bd1565b613e458185613e25565b9350613e55818560208601613824565b80840191505092915050565b6000613e6d8289613ab0565b600182019150613e7d8288613ad1565b602082019150613e8d8287613af2565b602082019150613e9d8286613ad1565b602082019150613ead8285613ad1565b602082019150613ebd8284613e30565b9150819050979650505050505050565b6000606082019050613ee26000830186613039565b613eef6020830185613039565b613efc604083018461341f565b949350505050565b600081519050919050565b600081905092915050565b6000613f2582613f04565b613f2f8185613f0f565b9350613f3f818560208601613824565b80840191505092915050565b613f5c613f57826134f3565b613a9e565b82525050565b6000613f6e8288613af2565b602082019150613f7e8287613f1a565b9150613f8a8286613af2565b602082019150613f9a8285613f1a565b9150613fa68284613f4b565b6001820191508190509695505050505050565b60008160e01b9050919050565b6000613fd182613fb9565b9050919050565b613fe9613fe482612e22565b613fc6565b82525050565b6000613ffb8285613fd8565b60048201915061400b8284613ad1565b6020820191508190509392505050565b7f2172656d6f746500000000000000000000000000000000000000000000000000600082015250565b60006140516007836133a2565b915061405c8261401b565b602082019050919050565b6000602082019050818103600083015261408081614044565b9050919050565b7f21616374696f6e00000000000000000000000000000000000000000000000000600082015250565b60006140bd6007836133a2565b91506140c882614087565b602082019050919050565b600060208201905081810360008301526140ec816140b0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061417e602b836133a2565b915061418982614122565b604082019050919050565b600060208201905081810360008301526141ad81614171565b9050919050565b7f56616c696469747920617373657274696f6e206661696c656400000000000000600082015250565b60006141ea6019836133a2565b91506141f5826141b4565b602082019050919050565b60006020820190508181036000830152614219816141dd565b9050919050565b7f5479706520617373657274696f6e206661696c65642e20476f74203078000000600082015250565b6000614256601d83613f0f565b915061426182614220565b601d82019050919050565b600069ffffffffffffffffffff82169050919050565b60008160b01b9050919050565b600061429a82614282565b9050919050565b6142b26142ad8261426c565b61428f565b82525050565b7f2e20457870656374656420307800000000000000000000000000000000000000600082015250565b60006142ee600d83613f0f565b91506142f9826142b8565b600d82019050919050565b600061430f82614249565b915061431b82856142a1565b600a8201915061432a826142e1565b915061433682846142a1565b600a820191508190509392505050565b600061435182613f04565b61435b81856133a2565b935061436b818560208601613824565b614374816130a9565b840191505092915050565b600060208201905081810360008301526143998184614346565b905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006143fd602a836133a2565b9150614408826143a1565b604082019050919050565b6000602082019050818103600083015261442c816143f0565b9050919050565b600061443e82612dec565b915061444983612dec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561447e5761447d613cd0565b5b828201905092915050565b6000614494826134f3565b915061449f836134f3565b92508160ff04831182151516156144b9576144b8613cd0565b5b828202905092915050565b60006144cf826134f3565b91506144da836134f3565b9250828210156144ed576144ec613cd0565b5b828203905092915050565b60006bffffffffffffffffffffffff82169050919050565b600061451b826144f8565b9150614526836144f8565b9250826bffffffffffffffffffffffff0382111561454757614546613cd0565b5b828201905092915050565b7f54797065644d656d566965772f696e646578202d20417474656d70746564207460008201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000602082015250565b60006145ae603a836133a2565b91506145b982614552565b604082019050919050565b600060208201905081810360008301526145dd816145a1565b9050919050565b60006145ef82612dec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361462157614620613cd0565b5b600182019050919050565b600061463782612dec565b915061464283612dec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561467b5761467a613cd0565b5b828202905092915050565b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686560008201527f20766965772e20536c6963652069732061742030780000000000000000000000602082015250565b60006146e2603583613f0f565b91506146ed82614686565b603582019050919050565b600065ffffffffffff82169050919050565b60008160d01b9050919050565b60006147228261470a565b9050919050565b61473a614735826146f8565b614717565b82525050565b7f2077697468206c656e6774682030780000000000000000000000000000000000600082015250565b6000614776600f83613f0f565b915061478182614740565b600f82019050919050565b7f2e20417474656d7074656420746f20696e646578206174206f6666736574203060008201527f7800000000000000000000000000000000000000000000000000000000000000602082015250565b60006147e8602183613f0f565b91506147f38261478c565b602182019050919050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b6000614834600183613f0f565b915061483f826147fe565b600182019050919050565b6000614855826146d5565b91506148618287614729565b60068201915061487082614769565b915061487c8286614729565b60068201915061488b826147db565b91506148978285614729565b6006820191506148a682614769565b91506148b28284614729565b6006820191506148c182614827565b915081905095945050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061492b6026836133a2565b9150614936826148cf565b604082019050919050565b6000602082019050818103600083015261495a8161491e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614997601d836133a2565b91506149a282614961565b602082019050919050565b600060208201905081810360008301526149c68161498a565b9050919050565b60006149d98284613e30565b915081905092915050565b7f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460008201527f6572206465726566000000000000000000000000000000000000000000000000602082015250565b6000614a406028836133a2565b9150614a4b826149e4565b604082019050919050565b60006020820190508181036000830152614a6f81614a33565b9050919050565b7f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60008201527f696e746572206465726566000000000000000000000000000000000000000000602082015250565b6000614ad2602b836133a2565b9150614add82614a76565b604082019050919050565b60006020820190508181036000830152614b0181614ac5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b4282612dec565b9150614b4d83612dec565b925082614b5d57614b5c614b08565b5b82820490509291505056fea26469706673582212208b71a6f21ead7e39daf8c92570bd93c47071a5428bee4985bd46a2a3608f0d4264736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c80638da5cb5b116100645780638da5cb5b146101b15780639d23c4c7146101dc578063ab2dc3f514610207578063b49c53a714610230578063bc7dbab314610259578063f2fde38b14610282576100b2565b80631cabf08f146100b75780633339df96146100e057806341bdc8b51461010b578063485cc95514610134578063715018a61461015d57806383bbb80614610174576100b2565b366100b257005b600080fd5b3480156100c357600080fd5b506100de60048036038101906100d99190612e94565b6102ab565b005b3480156100ec57600080fd5b506100f5610392565b6040516101029190612f5a565b60405180910390f35b34801561011757600080fd5b50610132600480360381019061012d9190612f75565b6103b8565b005b34801561014057600080fd5b5061015b60048036038101906101569190612fa2565b610404565b005b34801561016957600080fd5b50610172610586565b005b34801561018057600080fd5b5061019b60048036038101906101969190612fe2565b610590565b6040516101a8919061301e565b60405180910390f35b3480156101bd57600080fd5b506101c66105a8565b6040516101d39190613048565b60405180910390f35b3480156101e857600080fd5b506101f16105d2565b6040516101fe9190613084565b60405180910390f35b34801561021357600080fd5b5061022e600480360381019061022991906131e5565b6105f8565b005b34801561023c57600080fd5b5061025760048036038101906102529190613268565b61076d565b005b34801561026557600080fd5b50610280600480360381019061027b9190613308565b61079d565b005b34801561028e57600080fd5b506102a960048036038101906102a49190612f75565b61088f565b005b6000801b81036102f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e7906133ff565b60405180910390fd5b6000806102fd8686610912565b91509150600061030e848784610d28565b905061031b858483610d7f565b8463ffffffff163373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fcf20fd9072af09cee97ee48e835f72e237cebf880d75143434214e57d6496d60878a60405161038192919061342e565b60405180910390a450505050505050565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6103c0610e9a565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff161590508080156104355750600160008054906101000a900460ff1660ff16105b80610462575061044430610f18565b1580156104615750600160008054906101000a900460ff1660ff16145b5b6104a1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610498906134c9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156104de576001600060016101000a81548160ff0219169083151502179055505b8260c960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061052882610f3b565b80156105815760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105789190613531565b60405180910390a15b505050565b61058e610e9a565b565b60976020528060005260406000206000915090505481565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61060133610f87565b610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790613598565b60405180910390fd5b838261064c828261102c565b61068b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068290613604565b60405180910390fd5b60006106af6106a460008661106790919063ffffffff16565b62ffffff1916611092565b905060006106c28262ffffff19166110b2565b905060006106d58362ffffff191661111e565b90506106e68162ffffff19166111b5565b156106fc576106f7898984846111c9565b610762565b61070b8162ffffff19166111f1565b1561071f5761071a8282611205565b610761565b6000610760576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075790613670565b60405180910390fd5b5b5b505050505050505050565b610775610e9a565b80609760008463ffffffff1663ffffffff168152602001908152602001600020819055505050565b6000806107aa8888610912565b9150915060006108098689846107bf3361141f565b89898080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611442565b9050610816878483610d7f565b8663ffffffff163373ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167fcf20fd9072af09cee97ee48e835f72e237cebf880d75143434214e57d6496d60898c60405161087c92919061342e565b60405180910390a4505050505050505050565b610897610e9a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610906576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fd90613702565b60405180910390fd5b61090f8161149f565b50565b60008060008311610958576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094f9061376e565b60405180910390fd5b600084905060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c86415cb866040518263ffffffff1660e01b81526004016109b89190613048565b602060405180830381865afa1580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f991906137c6565b15610b9157610a2b3330868873ffffffffffffffffffffffffffffffffffffffff16611565909392919063ffffffff16565b610b8a8173ffffffffffffffffffffffffffffffffffffffff166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a79573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610aa291906138c7565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015610aed573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1691906138c7565b8373ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b85919061393c565b6115ee565b9150610c70565b8073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b8152600401610bcc929190613969565b600060405180830381600087803b158015610be657600080fd5b505af1158015610bfa573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16634815fcb16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906139a7565b91505b60008060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1537686886040518263ffffffff1660e01b8152600401610cce9190613048565b6040805180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e91906139e9565b91509150610d1c828261162a565b94505050509250929050565b6000610d7660036007811115610d4157610d40613a29565b5b6003868686604051602001610d599493929190613b09565b60405160208183030381529060405261106790919063ffffffff16565b90509392505050565b6000610d8a8461167b565b9050606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639fa92f9d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1d9190613b95565b73ffffffffffffffffffffffffffffffffffffffff1663fa31de018583610e4487876116e9565b6040518463ffffffff1660e01b8152600401610e6293929190613c26565b600060405180830381600087803b158015610e7c57600080fd5b505af1158015610e90573d6000803e3d6000fd5b5050505050505050565b610ea2611822565b73ffffffffffffffffffffffffffffffffffffffff16610ec06105a8565b73ffffffffffffffffffffffffffffffffffffffff1614610f16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0d90613cb0565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f8461182a565b50565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635190bc53836040518263ffffffff1660e01b8152600401610fe49190613048565b602060405180830381865afa158015611001573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102591906137c6565b9050919050565b600081609760008563ffffffff1663ffffffff1681526020019081526020016000205414801561105f57506000801b8214155b905092915050565b6000808351905060006020850190506110888464ffffffffff168284611883565b9250505092915050565b60006110ab6110a0836118f1565b62ffffff1916611944565b9050919050565b60008160026110e28160078111156110cd576110cc613a29565b5b8362ffffff191661199690919063ffffffff16565b5061111560006024600160078111156110fe576110fd613a29565b5b8762ffffff1916611a44909392919063ffffffff16565b92505050919050565b600081600261114e81600781111561113957611138613a29565b5b8362ffffff191661199690919063ffffffff16565b50600060246111628662ffffff1916611af0565b6bffffffffffffffffffffffff1661117a9190613cff565b9050600061118786611b10565b60ff1690506111aa602483838962ffffff1916611a44909392919063ffffffff16565b945050505050919050565b60006111c2826003611b36565b9050919050565b60006111da8262ffffff1916611b9a565b90506111e98585858585611bee565b505050505050565b60006111fe826007611b36565b9050919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b869d89a6112548562ffffff1916611efc565b6112638662ffffff1916611f53565b6040518363ffffffff1660e01b8152600401611280929190613d33565b6020604051808303816000875af115801561129f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c39190613d71565b905060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c86415cb826040518263ffffffff1660e01b81526004016113209190613048565b602060405180830381865afa15801561133d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136191906137c6565b156113a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139890613dea565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16636bd080496113cc8462ffffff1916611faa565b6040518263ffffffff1660e01b81526004016113e89190613e0a565b600060405180830381600087803b15801561140257600080fd5b505af1158015611416573d6000803e3d6000fd5b50505050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1660001b9050919050565b60006114946005600781111561145b5761145a613a29565b5b6005888888888860405160200161147796959493929190613e61565b60405160208183030381529060405261106790919063ffffffff16565b905095945050505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6115e8846323b872dd60e01b85858560405160240161158693929190613ecd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612001565b50505050565b60008351848451858560405160200161160b959493929190613f62565b6040516020818303038152906040528051906020012090509392505050565b60006116736001600781111561164357611642613a29565b5b8484604051602001611656929190613fef565b60405160208183030381529060405261106790919063ffffffff16565b905092915050565b6000609760008363ffffffff1663ffffffff1681526020019081526020016000205490506000801b81036116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db90614067565b60405180910390fd5b919050565b606082600161171981600781111561170457611703613a29565b5b8362ffffff191661199690919063ffffffff16565b50611723846120c8565b611762576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611759906140d3565b60405180910390fd5b6000600267ffffffffffffffff81111561177f5761177e6130ba565b5b6040519080825280602002602001820160405280156117ad5781602001602082028036833780820191505090505b50905085816000815181106117c5576117c46140f3565b5b602002602001019062ffffff1916908162ffffff19168152505084816001815181106117f4576117f36140f3565b5b602002602001019062ffffff1916908162ffffff191681525050611817816120fa565b935050505092915050565b600033905090565b600060019054906101000a900460ff16611879576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187090614194565b60405180910390fd5b61188161215d565b565b60008061189983856121be90919063ffffffff16565b90506040518111156118aa57600090505b600081036118db577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009150506118ea565b6118e68585856121d4565b9150505b9392505050565b60006118fc826121f5565b156119345761192d6002600781111561191857611917613a29565b5b8362ffffff191661225e90919063ffffffff16565b905061193f565b61193c612279565b90505b919050565b600061194f826122a1565b61198e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198590614200565b60405180910390fd5b819050919050565b60006119a283836122e3565b611a3b5760006119c06119b485612306565b64ffffffffff16612313565b91505060006119d58464ffffffffff16612313565b915050600082826040516020016119ed929190614304565b6040516020818303038152906040529050806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a32919061437f565b60405180910390fd5b82905092915050565b600080611a50866123e3565b6bffffffffffffffffffffffff169050611a6986612403565b611a8e85611a8088856121be90919063ffffffff16565b6121be90919063ffffffff16565b1115611abd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000915050611ae8565b611ad085826121be90919063ffffffff16565b9050611ae48364ffffffffff168286611883565b9150505b949350505050565b6000806bffffffffffffffffffffffff9050808360181c16915050919050565b6000611b2f602460018462ffffff19166124369092919063ffffffff16565b9050919050565b6000816007811115611b4b57611b4a613a29565b5b60ff16611b578461246d565b60ff16148015611b925750816007811115611b7557611b74613a29565b5b611b7e84612493565b6007811115611b9057611b8f613a29565b5b145b905092915050565b6000816003611bca816007811115611bb557611bb4613a29565b5b8362ffffff191661199690919063ffffffff16565b50611be5600d8562ffffff19166124c090919063ffffffff16565b92505050919050565b600060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b869d89a611c3d8662ffffff1916611efc565b611c4c8762ffffff1916611f53565b6040518363ffffffff1660e01b8152600401611c69929190613d33565b6020604051808303816000875af1158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190613d71565b90506000611cbf8462ffffff19166124d6565b905060c960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c86415cb836040518263ffffffff1660e01b8152600401611d1c9190613048565b602060405180830381865afa158015611d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5d91906137c6565b15611d9257611d8d83828473ffffffffffffffffffffffffffffffffffffffff166124fc9092919063ffffffff16565b611e79565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1984836040518363ffffffff1660e01b8152600401611dcd929190613969565b600060405180830381600087803b158015611de757600080fd5b505af1158015611dfb573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663cc2ab7c7611e2a8662ffffff1916612582565b6040518263ffffffff1660e01b8152600401611e46919061301e565b600060405180830381600087803b158015611e6057600080fd5b505af1158015611e74573d6000803e3d6000fd5b505050505b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16611eb189896125a8565b67ffffffffffffffff167ffeb81b556809bdb56115720c39438faa83a27379815edc26111d0571d66b5bf284604051611eea9190613e0a565b60405180910390a45095945050505050565b6000816001611f2c816007811115611f1757611f16613a29565b5b8362ffffff191661199690919063ffffffff16565b50611f4a600060048662ffffff19166124369092919063ffffffff16565b92505050919050565b6000816001611f83816007811115611f6e57611f6d613a29565b5b8362ffffff191661199690919063ffffffff16565b50611fa1600460208662ffffff19166125cf9092919063ffffffff16565b92505050919050565b6000816007611fda816007811115611fc557611fc4613a29565b5b8362ffffff191661199690919063ffffffff16565b50611ff8602160208662ffffff19166124369092919063ffffffff16565b92505050919050565b6000612063826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166127239092919063ffffffff16565b90506000815111156120c3578080602001905181019061208391906137c6565b6120c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120b990614413565b60405180910390fd5b5b505050565b60006120d3826111b5565b806120e357506120e28261273b565b5b806120f357506120f2826111f1565b5b9050919050565b606060006040519050600061211b846020846121169190614433565b61274f565b9050600061212882611af0565b6bffffffffffffffffffffffff1690506000612143836127f3565b905081845260208185010160405283945050505050919050565b600060019054906101000a900460ff166121ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a390614194565b60405180910390fd5b6121bc6121b7611822565b61149f565b565b600081836121cc9190614433565b905092915050565b600083811760601b905082811760601b905081811760181b90509392505050565b6000806122078362ffffff1916611af0565b6bffffffffffffffffffffffff169050606160246122259190614433565b81148061223f57506081602461223b9190614433565b8110155b806122565750602160246122539190614433565b81145b915050919050565b60008260281b60281c811790508160d81b8117905092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000905090565b600064ffffffffff6122b283612306565b64ffffffffff16036122c757600090506122de565b60006122d283612403565b90506040518111199150505b919050565b60008164ffffffffff166122f684612306565b64ffffffffff1614905092915050565b60008160d81c9050919050565b6000806000601f90505b600f8160ff1611156123795760006008826123389190614489565b60ff1685901c905061234981612811565b61ffff168417935060108260ff161461236457601084901b93505b5060018161237291906144c4565b905061231d565b506000600f90505b60ff8160ff1610156123dd57600060088261239c9190614489565b60ff1685901c90506123ad81612811565b61ffff168317925060008260ff16146123c857601083901b92505b506001816123d691906144c4565b9050612381565b50915091565b6000806bffffffffffffffffffffffff9050808360781c16915050919050565b600061240e82611af0565b612417836123e3565b6124219190614510565b6bffffffffffffffffffffffff169050919050565b6000600882602061244791906144c4565b6124519190614489565b60ff1661245f8585856125cf565b60001c901c90509392505050565b600061248c600060018462ffffff19166124369092919063ffffffff16565b9050919050565b60006124a48262ffffff1916612306565b60ff1660078111156124b9576124b8613a29565b5b9050919050565b60006124ce83836014612436565b905092915050565b60006124f5602160208462ffffff19166124369092919063ffffffff16565b9050919050565b61257d8363a9059cbb60e01b848460405160240161251b929190613969565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612001565b505050565b60006125a1604160208462ffffff19166125cf9092919063ffffffff16565b9050919050565b60008163ffffffff1660208463ffffffff1667ffffffffffffffff16901b17905092915050565b6000808260ff16036125e6576000801b905061271c565b6125ef84611af0565b6bffffffffffffffffffffffff166126138360ff16856121be90919063ffffffff16565b111561269057612654612625856123e3565b6bffffffffffffffffffffffff1661263c86611af0565b6bffffffffffffffffffffffff16858560ff1661284a565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612687919061437f565b60405180910390fd5b60208260ff1611156126d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126ce906145c4565b60405180910390fd5b60006008836126e69190614489565b905060006126f3866123e3565b6bffffffffffffffffffffffff169050600061270e836128b8565b905080868301511693505050505b9392505050565b606061273284846000856128e7565b90509392505050565b6000612748826005611b36565b9050919050565b6000604051828111156127625760206060fd5b506000805b84518110156127dd576000858281518110612785576127846140f3565b5b602002602001015190506127a481848761279f9190614433565b6129fb565b506127ae81611af0565b6bffffffffffffffffffffffff16836127c79190614433565b92505080806127d5906145e4565b915050612767565b506127ea600084836121d4565b91505092915050565b6000602061280083612b06565b61280a919061462c565b9050919050565b600061282360048360ff16901c612b45565b60ff168117905060088161ffff16901b905061283e82612b45565b60ff1681179050919050565b6060600061285786612313565b915050600061286586612313565b915050600061287386612313565b915050600061288186612313565b9150508383838360405160200161289b949392919061484a565b604051602081830303815290604052945050505050949350505050565b60007f8000000000000000000000000000000000000000000000000000000000000000600183031d9050919050565b60608247101561292c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292390614941565b60405180910390fd5b61293585612ca5565b612974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296b906149ad565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161299d91906149cd565b60006040518083038185875af1925050503d80600081146129da576040519150601f19603f3d011682016040523d82523d6000602084013e6129df565b606091505b50915091506129ef828286612cc8565b92505050949350505050565b6000612a0683612d2f565b612a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3c90614a56565b60405180910390fd5b612a4e836122a1565b612a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8490614ae8565b60405180910390fd5b6000612a9884611af0565b6bffffffffffffffffffffffff1690506000612ab3856123e3565b6bffffffffffffffffffffffff1690506000604051905084811115612ad85760206060fd5b8285848460045afa50612afb612aed87612306565b64ffffffffff1686856121d4565b935050505092915050565b60006020612b346020612b1885611af0565b6bffffffffffffffffffffffff166121be90919063ffffffff16565b612b3e9190614b37565b9050919050565b60008060f08317905060f08160ff1603612b63576030915050612ca0565b60f18160ff1603612b78576031915050612ca0565b60f28160ff1603612b8d576032915050612ca0565b60f38160ff1603612ba2576033915050612ca0565b60f48160ff1603612bb7576034915050612ca0565b60f58160ff1603612bcc576035915050612ca0565b60f68160ff1603612be1576036915050612ca0565b60f78160ff1603612bf6576037915050612ca0565b60f88160ff1603612c0b576038915050612ca0565b60f98160ff1603612c20576039915050612ca0565b60fa8160ff1603612c35576061915050612ca0565b60fb8160ff1603612c4a576062915050612ca0565b60fc8160ff1603612c5f576063915050612ca0565b60fd8160ff1603612c74576064915050612ca0565b60fe8160ff1603612c89576065915050612ca0565b60ff8160ff1603612c9e576066915050612ca0565b505b919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315612cd857829050612d28565b600083511115612ceb5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d1f919061437f565b60405180910390fd5b9392505050565b6000612d3a82612d42565b159050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000062ffffff19168262ffffff1916149050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612db982612d8e565b9050919050565b612dc981612dae565b8114612dd457600080fd5b50565b600081359050612de681612dc0565b92915050565b6000819050919050565b612dff81612dec565b8114612e0a57600080fd5b50565b600081359050612e1c81612df6565b92915050565b600063ffffffff82169050919050565b612e3b81612e22565b8114612e4657600080fd5b50565b600081359050612e5881612e32565b92915050565b6000819050919050565b612e7181612e5e565b8114612e7c57600080fd5b50565b600081359050612e8e81612e68565b92915050565b60008060008060808587031215612eae57612ead612d84565b5b6000612ebc87828801612dd7565b9450506020612ecd87828801612e0d565b9350506040612ede87828801612e49565b9250506060612eef87828801612e7f565b91505092959194509250565b6000819050919050565b6000612f20612f1b612f1684612d8e565b612efb565b612d8e565b9050919050565b6000612f3282612f05565b9050919050565b6000612f4482612f27565b9050919050565b612f5481612f39565b82525050565b6000602082019050612f6f6000830184612f4b565b92915050565b600060208284031215612f8b57612f8a612d84565b5b6000612f9984828501612dd7565b91505092915050565b60008060408385031215612fb957612fb8612d84565b5b6000612fc785828601612dd7565b9250506020612fd885828601612dd7565b9150509250929050565b600060208284031215612ff857612ff7612d84565b5b600061300684828501612e49565b91505092915050565b61301881612e5e565b82525050565b6000602082019050613033600083018461300f565b92915050565b61304281612dae565b82525050565b600060208201905061305d6000830184613039565b92915050565b600061306e82612f27565b9050919050565b61307e81613063565b82525050565b60006020820190506130996000830184613075565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6130f2826130a9565b810181811067ffffffffffffffff82111715613111576131106130ba565b5b80604052505050565b6000613124612d7a565b905061313082826130e9565b919050565b600067ffffffffffffffff8211156131505761314f6130ba565b5b613159826130a9565b9050602081019050919050565b82818337600083830152505050565b600061318861318384613135565b61311a565b9050828152602081018484840111156131a4576131a36130a4565b5b6131af848285613166565b509392505050565b600082601f8301126131cc576131cb61309f565b5b81356131dc848260208601613175565b91505092915050565b600080600080608085870312156131ff576131fe612d84565b5b600061320d87828801612e49565b945050602061321e87828801612e49565b935050604061322f87828801612e7f565b925050606085013567ffffffffffffffff8111156132505761324f612d89565b5b61325c878288016131b7565b91505092959194509250565b6000806040838503121561327f5761327e612d84565b5b600061328d85828601612e49565b925050602061329e85828601612e7f565b9150509250929050565b600080fd5b600080fd5b60008083601f8401126132c8576132c761309f565b5b8235905067ffffffffffffffff8111156132e5576132e46132a8565b5b602083019150836001820283011115613301576133006132ad565b5b9250929050565b60008060008060008060a0878903121561332557613324612d84565b5b600061333389828a01612dd7565b965050602061334489828a01612e0d565b955050604061335589828a01612e49565b945050606061336689828a01612e7f565b935050608087013567ffffffffffffffff81111561338757613386612d89565b5b61339389828a016132b2565b92509250509295509295509295565b600082825260208201905092915050565b7f2172656369700000000000000000000000000000000000000000000000000000600082015250565b60006133e96006836133a2565b91506133f4826133b3565b602082019050919050565b60006020820190508181036000830152613418816133dc565b9050919050565b61342881612dec565b82525050565b6000604082019050613443600083018561300f565b613450602083018461341f565b9392505050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006134b3602e836133a2565b91506134be82613457565b604082019050919050565b600060208201905081810360008301526134e2816134a6565b9050919050565b6000819050919050565b600060ff82169050919050565b600061351b613516613511846134e9565b612efb565b6134f3565b9050919050565b61352b81613500565b82525050565b60006020820190506135466000830184613522565b92915050565b7f217265706c696361000000000000000000000000000000000000000000000000600082015250565b60006135826008836133a2565b915061358d8261354c565b602082019050919050565b600060208201905081810360008301526135b181613575565b9050919050565b7f2172656d6f746520726f75746572000000000000000000000000000000000000600082015250565b60006135ee600e836133a2565b91506135f9826135b8565b602082019050919050565b6000602082019050818103600083015261361d816135e1565b9050919050565b7f2176616c696420616374696f6e00000000000000000000000000000000000000600082015250565b600061365a600d836133a2565b915061366582613624565b602082019050919050565b600060208201905081810360008301526136898161364d565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006136ec6026836133a2565b91506136f782613690565b604082019050919050565b6000602082019050818103600083015261371b816136df565b9050919050565b7f21616d6e74000000000000000000000000000000000000000000000000000000600082015250565b60006137586005836133a2565b915061376382613722565b602082019050919050565b600060208201905081810360008301526137878161374b565b9050919050565b60008115159050919050565b6137a38161378e565b81146137ae57600080fd5b50565b6000815190506137c08161379a565b92915050565b6000602082840312156137dc576137db612d84565b5b60006137ea848285016137b1565b91505092915050565b600067ffffffffffffffff82111561380e5761380d6130ba565b5b613817826130a9565b9050602081019050919050565b60005b83811015613842578082015181840152602081019050613827565b83811115613851576000848401525b50505050565b600061386a613865846137f3565b61311a565b905082815260208101848484011115613886576138856130a4565b5b613891848285613824565b509392505050565b600082601f8301126138ae576138ad61309f565b5b81516138be848260208601613857565b91505092915050565b6000602082840312156138dd576138dc612d84565b5b600082015167ffffffffffffffff8111156138fb576138fa612d89565b5b61390784828501613899565b91505092915050565b613919816134f3565b811461392457600080fd5b50565b60008151905061393681613910565b92915050565b60006020828403121561395257613951612d84565b5b600061396084828501613927565b91505092915050565b600060408201905061397e6000830185613039565b61398b602083018461341f565b9392505050565b6000815190506139a181612e68565b92915050565b6000602082840312156139bd576139bc612d84565b5b60006139cb84828501613992565b91505092915050565b6000815190506139e381612e32565b92915050565b60008060408385031215613a00576139ff612d84565b5b6000613a0e858286016139d4565b9250506020613a1f85828601613992565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60088110613a6957613a68613a29565b5b50565b6000819050613a7a82613a58565b919050565b6000613a8a82613a6c565b9050919050565b60008160f81b9050919050565b6000613aa982613a91565b9050919050565b613ac1613abc82613a7f565b613a9e565b82525050565b6000819050919050565b613ae2613add82612e5e565b613ac7565b82525050565b6000819050919050565b613b03613afe82612dec565b613ae8565b82525050565b6000613b158287613ab0565b600182019150613b258286613ad1565b602082019150613b358285613af2565b602082019150613b458284613ad1565b60208201915081905095945050505050565b6000613b6282612dae565b9050919050565b613b7281613b57565b8114613b7d57600080fd5b50565b600081519050613b8f81613b69565b92915050565b600060208284031215613bab57613baa612d84565b5b6000613bb984828501613b80565b91505092915050565b613bcb81612e22565b82525050565b600081519050919050565b600082825260208201905092915050565b6000613bf882613bd1565b613c028185613bdc565b9350613c12818560208601613824565b613c1b816130a9565b840191505092915050565b6000606082019050613c3b6000830186613bc2565b613c48602083018561300f565b8181036040830152613c5a8184613bed565b9050949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613c9a6020836133a2565b9150613ca582613c64565b602082019050919050565b60006020820190508181036000830152613cc981613c8d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613d0a82612dec565b9150613d1583612dec565b925082821015613d2857613d27613cd0565b5b828203905092915050565b6000604082019050613d486000830185613bc2565b613d55602083018461300f565b9392505050565b600081519050613d6b81612dc0565b92915050565b600060208284031215613d8757613d86612d84565b5b6000613d9584828501613d5c565b91505092915050565b7f4c4f43414c5f4f524947494e0000000000000000000000000000000000000000600082015250565b6000613dd4600c836133a2565b9150613ddf82613d9e565b602082019050919050565b60006020820190508181036000830152613e0381613dc7565b9050919050565b6000602082019050613e1f600083018461341f565b92915050565b600081905092915050565b6000613e3b82613bd1565b613e458185613e25565b9350613e55818560208601613824565b80840191505092915050565b6000613e6d8289613ab0565b600182019150613e7d8288613ad1565b602082019150613e8d8287613af2565b602082019150613e9d8286613ad1565b602082019150613ead8285613ad1565b602082019150613ebd8284613e30565b9150819050979650505050505050565b6000606082019050613ee26000830186613039565b613eef6020830185613039565b613efc604083018461341f565b949350505050565b600081519050919050565b600081905092915050565b6000613f2582613f04565b613f2f8185613f0f565b9350613f3f818560208601613824565b80840191505092915050565b613f5c613f57826134f3565b613a9e565b82525050565b6000613f6e8288613af2565b602082019150613f7e8287613f1a565b9150613f8a8286613af2565b602082019150613f9a8285613f1a565b9150613fa68284613f4b565b6001820191508190509695505050505050565b60008160e01b9050919050565b6000613fd182613fb9565b9050919050565b613fe9613fe482612e22565b613fc6565b82525050565b6000613ffb8285613fd8565b60048201915061400b8284613ad1565b6020820191508190509392505050565b7f2172656d6f746500000000000000000000000000000000000000000000000000600082015250565b60006140516007836133a2565b915061405c8261401b565b602082019050919050565b6000602082019050818103600083015261408081614044565b9050919050565b7f21616374696f6e00000000000000000000000000000000000000000000000000600082015250565b60006140bd6007836133a2565b91506140c882614087565b602082019050919050565b600060208201905081810360008301526140ec816140b0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061417e602b836133a2565b915061418982614122565b604082019050919050565b600060208201905081810360008301526141ad81614171565b9050919050565b7f56616c696469747920617373657274696f6e206661696c656400000000000000600082015250565b60006141ea6019836133a2565b91506141f5826141b4565b602082019050919050565b60006020820190508181036000830152614219816141dd565b9050919050565b7f5479706520617373657274696f6e206661696c65642e20476f74203078000000600082015250565b6000614256601d83613f0f565b915061426182614220565b601d82019050919050565b600069ffffffffffffffffffff82169050919050565b60008160b01b9050919050565b600061429a82614282565b9050919050565b6142b26142ad8261426c565b61428f565b82525050565b7f2e20457870656374656420307800000000000000000000000000000000000000600082015250565b60006142ee600d83613f0f565b91506142f9826142b8565b600d82019050919050565b600061430f82614249565b915061431b82856142a1565b600a8201915061432a826142e1565b915061433682846142a1565b600a820191508190509392505050565b600061435182613f04565b61435b81856133a2565b935061436b818560208601613824565b614374816130a9565b840191505092915050565b600060208201905081810360008301526143998184614346565b905092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006143fd602a836133a2565b9150614408826143a1565b604082019050919050565b6000602082019050818103600083015261442c816143f0565b9050919050565b600061443e82612dec565b915061444983612dec565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561447e5761447d613cd0565b5b828201905092915050565b6000614494826134f3565b915061449f836134f3565b92508160ff04831182151516156144b9576144b8613cd0565b5b828202905092915050565b60006144cf826134f3565b91506144da836134f3565b9250828210156144ed576144ec613cd0565b5b828203905092915050565b60006bffffffffffffffffffffffff82169050919050565b600061451b826144f8565b9150614526836144f8565b9250826bffffffffffffffffffffffff0382111561454757614546613cd0565b5b828201905092915050565b7f54797065644d656d566965772f696e646578202d20417474656d70746564207460008201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000602082015250565b60006145ae603a836133a2565b91506145b982614552565b604082019050919050565b600060208201905081810360008301526145dd816145a1565b9050919050565b60006145ef82612dec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361462157614620613cd0565b5b600182019050919050565b600061463782612dec565b915061464283612dec565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561467b5761467a613cd0565b5b828202905092915050565b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686560008201527f20766965772e20536c6963652069732061742030780000000000000000000000602082015250565b60006146e2603583613f0f565b91506146ed82614686565b603582019050919050565b600065ffffffffffff82169050919050565b60008160d01b9050919050565b60006147228261470a565b9050919050565b61473a614735826146f8565b614717565b82525050565b7f2077697468206c656e6774682030780000000000000000000000000000000000600082015250565b6000614776600f83613f0f565b915061478182614740565b600f82019050919050565b7f2e20417474656d7074656420746f20696e646578206174206f6666736574203060008201527f7800000000000000000000000000000000000000000000000000000000000000602082015250565b60006147e8602183613f0f565b91506147f38261478c565b602182019050919050565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b6000614834600183613f0f565b915061483f826147fe565b600182019050919050565b6000614855826146d5565b91506148618287614729565b60068201915061487082614769565b915061487c8286614729565b60068201915061488b826147db565b91506148978285614729565b6006820191506148a682614769565b91506148b28284614729565b6006820191506148c182614827565b915081905095945050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061492b6026836133a2565b9150614936826148cf565b604082019050919050565b6000602082019050818103600083015261495a8161491e565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614997601d836133a2565b91506149a282614961565b602082019050919050565b600060208201905081810360008301526149c68161498a565b9050919050565b60006149d98284613e30565b915081905092915050565b7f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460008201527f6572206465726566000000000000000000000000000000000000000000000000602082015250565b6000614a406028836133a2565b9150614a4b826149e4565b604082019050919050565b60006020820190508181036000830152614a6f81614a33565b9050919050565b7f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60008201527f696e746572206465726566000000000000000000000000000000000000000000602082015250565b6000614ad2602b836133a2565b9150614add82614a76565b604082019050919050565b60006020820190508181036000830152614b0181614ac5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614b4282612dec565b9150614b4d83612dec565b925082614b5d57614b5c614b08565b5b82820490509291505056fea26469706673582212208b71a6f21ead7e39daf8c92570bd93c47071a5428bee4985bd46a2a3608f0d4264736f6c634300080f0033",
  "devdoc": {
    "events": {
      "Receive(uint64,address,address,uint256)": {
        "params": {
          "amount": "The amount of tokens being received",
          "originAndNonce": "Domain where the transfer originated and the unique identifier for the message from origin to destination, combined in a single field ((origin << 32) & nonce)",
          "recipient": "The address receiving the tokens; the original recipient of the transfer",
          "token": "The address of the local token contract being received"
        }
      },
      "Send(address,address,uint32,bytes32,uint256)": {
        "params": {
          "amount": "the amount of tokens sent",
          "from": "the address sending tokens",
          "toDomain": "the domain of the chain the tokens are being sent to",
          "toId": "the bytes32 address of the recipient of the tokens",
          "token": "the address of the token contract"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "enrollRemoteRouter(uint32,bytes32)": {
        "params": {
          "_domain": "The domain of the remote xApp Router",
          "_router": "The address of the remote xApp Router"
        }
      },
      "handle(uint32,uint32,bytes32,bytes)": {
        "params": {
          "_message": "The message",
          "_nonce": "The unique identifier for the message from origin to destination",
          "_origin": "The origin domain",
          "_sender": "The sender address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "should be impossible to renounce ownership;      we override OpenZeppelin OwnableUpgradeable's      implementation of renounceOwnership to make it a no-op"
      },
      "send(address,uint256,uint32,bytes32)": {
        "params": {
          "_amount": "The token amount",
          "_destination": "The destination domain",
          "_recipient": "The recipient address",
          "_token": "The token address"
        }
      },
      "sendToHook(address,uint256,uint32,bytes32,bytes)": {
        "params": {
          "_amount": "The token amount",
          "_destination": "The destination domain",
          "_extraData": "Extra data that will be passed to the hook for        execution",
          "_remoteHook": "The hook contract on the remote chain",
          "_token": "The token address"
        }
      },
      "setXAppConnectionManager(address)": {
        "params": {
          "_xAppConnectionManager": "The address of the xAppConnectionManager contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Receive(uint64,address,address,uint256)": {
        "notice": "emitted when tokens are dispensed to an account on this domain emitted when the transfer ultimately settles"
      },
      "Send(address,address,uint32,bytes32,uint256)": {
        "notice": "emitted when tokens are sent from this domain to another domain"
      }
    },
    "kind": "user",
    "methods": {
      "enrollRemoteRouter(uint32,bytes32)": {
        "notice": "Register the address of a Router contract for the same xApp on a remote chain"
      },
      "handle(uint32,uint32,bytes32,bytes)": {
        "notice": "Handles an incoming message"
      },
      "send(address,uint256,uint32,bytes32)": {
        "notice": "Send tokens to a recipient on a remote chain"
      },
      "sendToHook(address,uint256,uint32,bytes32,bytes)": {
        "notice": "Send tokens to a hook on the remote chain"
      },
      "setXAppConnectionManager(address)": {
        "notice": "Modify the contract the xApp uses to validate Replica contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 566,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11424,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "xAppConnectionManager",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(XAppConnectionManager)7982"
      },
      {
        "astId": 11428,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "__GAP",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11311,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "remotes",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 11315,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "__GAP",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3520,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "tokenRegistry",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(TokenRegistry)6069"
      },
      {
        "astId": 3524,
        "contract": "contracts/ABridgeRouter.sol:ABridgeRouter",
        "label": "canonicalSharesAtDestination",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(TokenRegistry)6069": {
        "encoding": "inplace",
        "label": "contract TokenRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(XAppConnectionManager)7982": {
        "encoding": "inplace",
        "label": "contract XAppConnectionManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}