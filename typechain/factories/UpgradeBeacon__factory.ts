/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { UpgradeBeacon } from "../UpgradeBeacon";

export class UpgradeBeacon__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _initialImplementation: string,
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UpgradeBeacon> {
    return super.deploy(
      _initialImplementation,
      _controller,
      overrides || {}
    ) as Promise<UpgradeBeacon>;
  }
  getDeployTransaction(
    _initialImplementation: string,
    _controller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _initialImplementation,
      _controller,
      overrides || {}
    );
  }
  attach(address: string): UpgradeBeacon {
    return super.attach(address) as UpgradeBeacon;
  }
  connect(signer: Signer): UpgradeBeacon__factory {
    return super.connect(signer) as UpgradeBeacon__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UpgradeBeacon {
    return new Contract(address, _abi, signerOrProvider) as UpgradeBeacon;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_initialImplementation",
        type: "address",
      },
      {
        internalType: "address",
        name: "_controller",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgrade",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506040516106bd3803806106bd83398181016040528101906100329190610268565b6100418261007c60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050610391565b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361010a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010190610305565b60405180910390fd5b61011d816101e260201b6101d01760201c565b61015c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015390610371565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102358261020a565b9050919050565b6102458161022a565b811461025057600080fd5b50565b6000815190506102628161023c565b92915050565b6000806040838503121561027f5761027e610205565b5b600061028d85828601610253565b925050602061029e85828601610253565b9150509250929050565b600082825260208201905092915050565b7f2175706772616465000000000000000000000000000000000000000000000000600082015250565b60006102ef6008836102a8565b91506102fa826102b9565b602082019050919050565b6000602082019050818103600083015261031e816102e2565b9050919050565b7f696d706c656d656e746174696f6e2021636f6e74726163740000000000000000600082015250565b600061035b6018836102a8565b915061036682610325565b602082019050919050565b6000602082019050818103600083015261038a8161034e565b9050919050565b6080516103126103ab6000396000600601526103126000f3fe60806040527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100635760005460005260206000f35b60008035905061007281610074565b005b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610102576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100f990610250565b60405180910390fd5b61010b816101d0565b61014a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610141906102bc565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167ff78721226efe9a1bb678189a16d1554928b9f2192e2cb93eeda83b79fa40007d60405160405180910390a250565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082825260208201905092915050565b7f2175706772616465000000000000000000000000000000000000000000000000600082015250565b600061023a6008836101f3565b915061024582610204565b602082019050919050565b600060208201905081810360008301526102698161022d565b9050919050565b7f696d706c656d656e746174696f6e2021636f6e74726163740000000000000000600082015250565b60006102a66018836101f3565b91506102b182610270565b602082019050919050565b600060208201905081810360008301526102d581610299565b905091905056fea2646970667358221220e4867fb2f14f32cb2c6e7d237425b1850a3b888110e137d278011238a88d4fbf64736f6c634300080f0033";
